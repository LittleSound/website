[{"body":"Default Storage Layer of Clusterpedia supports two storage components: MySQL and PostgreSQL.\nWhen installing Clusterpedia, you can use existing storage component and create Default Storage Layer(ConfigMap) and Secret of storage component.\nConfigure the Default Storage Layer You shall create clusterpedia-internalstorage ConfigMap in the clusterpedia-system namespace.\n# internalstorage configmap exampleapiVersion:v1kind:ConfigMapmetadata:name:clusterpedia-internalstoragenamespace:clusterpedia-systemdata:internalstorage-config.yaml:|type: \"mysql\" host: \"clusterpedia-internalstorage-mysql\" port: 3306 user: root database: \"clusterpedia\" connPool: maxIdleConns: 10 maxOpenConns: 100 connMaxLifetime: 1h log: slowThreshold: \"100ms\" logger: filename: /var/log/clusterpedia/internalstorage.log maxbackups: 3Default Storage Layer config supports the following fields:\n   field description     type type of storage component such as “postgres” and “mysql”   host host for storage component such as IP address or Service Name   port port for storage component   user user for storage component   password password for storage component   database the database used by Clusterpedia    It is a good choice to store the access password to Secret. For details see Configure Secret of storage component\nConnection Pool    field description default value     connPool.maxIdleConns the maximum number of connections in the idle connection pool. 10   connPool.maxOpenConns the maximum number of open connections to the database. 100   connPool.connMaxLifetime the maximum amount of time a connection may be reused. 1h    Set up the database connection pool according to the user’s current environment.\nConfigure log Clusterpedia supports to configure logs for storage layer, enabling the log to record slow SQL queries and errors via the log field.\n   field description     log.stdout Output log to standard device   log.colorful Enable color print or not   log.slowThreshold Set threshold for slow SQL queries such as “100ms”   log.level Set the severity level such as Slient, Error, Warn, Info   log.logger configure rolling logger    After enabling log, if log.stdout is not set to true, the log will be output to /var/log/clusterpedia/internalstorage.log\nRolling logger Write storage lay logs to file, and configure log file rotation\n   field description     log.logger.filename the file to write logs to, backup log files will be retained in the same directory, default is /var/log/clusterpedia/internalstorage.log   log.logger.maxsize the maximum size in megabytes of the log file before it gets rotated. default is 100 MB.   log.logger.maxage the maximum number of days to retain old log files based on the timestamp encoded in their filename.   log.logger.maxbackups the maximum number of old log files to retain.   log.logger.localtime whether it is local time, default is to use UTC time   log.logger.compress compress determines if the rotated log files should be compressed using gzip.    Disable log If the log field is not filled in the internalstorage config, log will be ignored, for example:\ntype:\"mysql\"host:\"clusterpedia-internalstorage-mysql\"port:3306user:rootdatabase:\"clusterpedia\"More configuration The default storage layer also provides more configurations about MySQL and PostgreSQL. Refer to internalstorage/config.go.\nConfigure Secret The yaml file that is used to install Clusterpedia may get the password from internalstroage-password Secret.\nConfigure the storage component password to Secret\nkubectl -n clusterpedia-system create secret generic \\  internalstorage-password --from-literal=password=\u003cpassword to access storage components\u003e ","categories":"","description":"","excerpt":"Default Storage Layer of Clusterpedia supports two storage components: …","ref":"/docs/installation/configuration/configure-internalstorage/","tags":"","title":"Configure Storage Layer"},{"body":"Clusterpedia uses the custom resource - PediaCluster to represent the imported cluster.\napiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-examplespec:apiserver:\"https://10.30.43.43:6443\"kubeconfig:caData:tokenData:certData:keyData:syncResources:[]There are two ways for users to configure the imported clusters:\n Configure base64-encoded kube config directly to the spec.kubeconfig field for cluster connectivity and authentication. Configure the address for the imported cluster and the authentication information.  When using the apiserver field to set address for the imported cluster, there are several options for configure the authentication fields:\n caData + tokenData caData + certData + keyData   caData can be left blank if the cluster APIServer allows Insecure connections\n All these authentication fields need to be encoded by base64. If the field values are obtained directly from ConfigMap or Secret, they have already been encoded by base64.\nUse the Kube Config to import a cluster One of the easiest ways to connect and authenticate to a cluster is to use the kube config.\nFirst you need to base64 encode the kube config for the imported cluster.\nbase64 ./kubeconfig # Output: YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNdmFrTkRRV1ZoWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplRTFFYTNsT1JFVjNUVlJOZVU1R2IxaEVWRTE0VFVScmVVMXFSWGROVkUxNVRrWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVHk5VENuWnRhMVU1YmsxdVVsUklUM2x2SzNoamRGUkpZMGxQWW5NemMwRjVjVEkyZGpSUVlrVnRiM1pXTTJ4UE9WUXdNVEYyY0U5NlMwcHlPVUZ4ZVZaTVJuWUtWWEZCUkhCVGFrTTNXWGQzTW5ad1NsZDNiREV5U2xCdlVtMXhaMUZCU0ZOa1lsSnBVM0JEVERSdWRqbHZSMjVWT1dJMmRsbFdTeTlpUml0a1VWRkNTQXBuUTFoNk5uWm9UR1k0V21kMk4ydFVRMkpCZGtGUGFFOU9TbFUzTWxsWVRFOHpUMGxaUWpKdmExTkNSR0ZWVWpOdk5ucHdaR1ZXVGt0NVYwRXlOVkEzQ2tSb2JrOHlUazAxUXpscFJFUnFUVFJMWTJGVGEzSlBTa0p2YlVsc1NIRlpSalJ3VlhkVFRsRnZjR1ZHUlZSeVozWnpjVGt3U2tzMllVSlZTMHQ1YWpZS0syTkdkakkzUzBrNEsxWk1VRXRhU1RFMmMyNU1ibmcyUlhSVGF6WnRaakpYVEhkSlpsaHlRbGd3UkVzdllYQkVRMDE1UjJwRWIyZENhR3BKU1Zob1ZBcDJialZRWm5kRldVTnNkR1pGVEVoS1NrZFZRMEYzUlVGQllVNWFUVVpqZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVRTRSMEV4VldSRmQwVkNDaTkzVVVaTlFVMUNRV1k0ZDBoUldVUldVakJQUWtKWlJVWkpWRGhMUkhkQ2JVVnZNSGxhZFVGRVpraGtLelExTDNaRll6ZE5RbFZIUVRGVlpFVlJVVThLVFVGNVEwTnRkREZaYlZaNVltMVdNRnBZVFhkRVVWbEtTMjlhU1doMlkwNUJVVVZNUWxGQlJHZG5SVUpCVDBGNVZIUTRTM1pGTjBkdlJFaFFUMDlwZGdveVIySTJXV1ZzVVU1S2NVTXphMWRJT1hjMU5URk5hR1p2UzNaaU0yMVZhVVY2WlZNd09VTndaVVFyVEZoNVpubHFRemhaWWtKeFFqWlhTRmhOWldNckNucFBkRE5QYXpSWVYwRm1aVlZaVFhoT1ExRkpibGM0Y2pJNGNtWm5ibEVyYzFOQ2RIUXllRVJRTjFSWlkwOW9OVlpHWmtJMkszSnRUbUZUYmxaMU5qZ0tTRkZ4ZGxGTU5FRlhiVmhrUjA5alJXTkJSVGhZZGtkaU9XaHdTalZOY2tSSGR6UTBVVFl5T0c5WWF6WjBOMDFhV1RGT01VTlFkVzlIWjFWbVMxTjNiZ28xTVVGV1JURk9WVmROVjB0RVFYaGFhMkk0YkVodlIzVldhREZ6V21kM1NuSlJRalI1Y2xoMWNteEdOMFkyYlZSbFltNHJjRFZLTTB0b1QwVjRLemxzQ2pGWGRrd3diV2t4TDFKMmJWSktObTExWW10aldVd3pOMUZKV2pJMVlYZHlhRVpNTjBaMWVqTlJTVEZxVFRkWU1IWkVUMlZVTTJWdVZVRkNaVzVTTVM4S1VubG5QUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09CiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTAuNi4xMDAuMTA6NjQ0MwogIG5hbWU6IGt1YmVybmV0ZXMKY29udGV4dHM6Ci0gY29udGV4dDoKICAgIGNsdXN0ZXI6IGt1YmVybmV0ZXMKICAgIHVzZXI6IGt1YmVybmV0ZXMtYWRtaW4KICBuYW1lOiBrdWJlcm5ldGVzLWFkbWluQGt1YmVybmV0ZXMKY3VycmVudC1jb250ZXh0OiBrdWJlcm5ldGVzLWFkbWluQGt1YmVybmV0ZXMKa2luZDogQ29uZmlnCnByZWZlcmVuY2VzOiB7fQp1c2VyczoKLSBuYW1lOiBrdWJlcm5ldGVzLWFkbWluCiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSSlZFTkRRV2R0WjBGM1NVSkJaMGxKV2s0eVNscE5TbnAwU21kM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUVlJCTlUxcVVYaE5SRVY2VFdwU1lVWjNNSGxOYWtFMVRXcFJlRTFFUlhwTmFtaGhUVVJSZUFwR2VrRldRbWRPVmtKQmIxUkViazQxWXpOU2JHSlVjSFJaV0U0d1dsaEtlazFTYTNkR2QxbEVWbEZSUkVWNFFuSmtWMHBzWTIwMWJHUkhWbnBNVjBackNtSlhiSFZOU1VsQ1NXcEJUa0puYTNGb2EybEhPWGN3UWtGUlJVWkJRVTlEUVZFNFFVMUpTVUpEWjB0RFFWRkZRVFZEUkdSYVdIcEliMXAxVVRKeFJEZ0tTakpRZGtWdWEyTk1UV05RVG14RE1DOVRTR1YzV25kME5FRjRLM2RDWTFSSVJ6aGpWakJhZUZSYVQwdDNPSFJ4UWxrMk1tcGtOM1p4VkdoeFRWbHdad3AyYzNwSFVXeHlXbGRyZHpSUmFrUldORnBLY1dSbFRITkRVV3BqZUZsa05Ea3JSalEyYkVsS1VUSjVjRXhTUjBkb2NGTlpZMlYzWkdOTVkweHNTamRIQ21wRlJFTnlVRGxrWTFsSWRWUTFlSE5YVG5aQlFXcG5RM051UTNsU1ZXbExOVzAyTDFaR1JEQllTVFp6TlZFclFuZDBPVXNyUzFkblJrSlBVQ3M0TlRBS1Vra3ZZblJSYTJsdmNIZFphMGR1WmtkVE9FeEJiM2t2TTBwUWFsTXlWbXAwUVN0aVR6SnhUa1pFTmpWcWEwRXhWa05XVGxFeFIxVmphV1pYUTFaQ2RRcHpOM2hQUWpnME9WZzVjMUZ6TVhaTlpWSTNTbTh6VjBSRFJEWm9lVTFXZDNOb1FqbEdhR2QxYm5acFNFRlRibkJ5UTJWME9EUjJaMnBSYVdWT1RITmhDbWRFZEhaRlVVbEVRVkZCUW04eFdYZFdSRUZQUW1kT1ZraFJPRUpCWmpoRlFrRk5RMEpoUVhkRmQxbEVWbEl3YkVKQmQzZERaMWxKUzNkWlFrSlJWVWdLUVhkSmQwUkJXVVJXVWpCVVFWRklMMEpCU1hkQlJFRm1RbWRPVmtoVFRVVkhSRUZYWjBKVFJTOURaemhCV21oTFRrMXRZbWRCTTNnelpuVlBaamQ0U0FwUGVrRk9RbWRyY1docmFVYzVkekJDUVZGelJrRkJUME5CVVVWQk5XNWlRME5LYTBwTk5qQkRjVlZsZFdWVVUwbzBaRXBWWkc5S1NHVkhVblJGTWtKRkNrOVNXWEJIVUVVMllqUk5VVlJYY3pSbFZrOTFiRlUzYnpabU9WZFFVV1pDWm5JMmVGSlBXRFo1YUVoM2NIcDNkRVpVVW1od1lqaE5TVWxKV2pscWRqWUtaVVZ3TXpoWmFtUnBPVkV3SzBSaFkzRkxka0pVTURsMVEzWmtNR2x3UnpkTFNuVlNibkZMVVd4VWNtVnRkWFJsVGpOMk9HOUNTVGxXWjJsc2JXUllaZ3BwWkdGS1lqUlJaelpZVkdvemNFMUdkbFpqWTNOSGFWZG9UMHh5T1ZaSVZDdFFWazVaTjB4WlVHeG1Xa2RETkRCSk1URmlTVFZuUlZadVUydHZNa1JqQ21Od1NXOHJNbmRWZFRGU1IybExZMUp3V0RSb1FtUnBORWxYYlM4ek5sTXhaM2gzTW1KMFdFOWxNV3Q2T1c5SFlVNVplazVXU1VObkwzZDNiRzVEYVVNS2FtWjRiVFJJZWtOR1NXcHZRMGRxVFdWWVJFMVhieTlGT0d0U2RuaDFhMnQzYlc1MWN6aHpVV05FTVcxUkswZFFlbWM5UFFvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2c9PQogICAgY2xpZW50LWtleS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFwTlNVbEZiM2RKUWtGQlMwTkJVVVZCTlVORVpGcFlla2h2V25WUk1uRkVPRW95VUhaRmJtdGpURTFqVUU1c1F6QXZVMGhsZDFwM2REUkJlQ3QzUW1OVUNraEhPR05XTUZwNFZGcFBTM2M0ZEhGQ1dUWXlhbVEzZG5GVWFIRk5XWEJuZG5ONlIxRnNjbHBYYTNjMFVXcEVWalJhU25Ga1pVeHpRMUZxWTNoWlpEUUtPU3RHTkRac1NVcFJNbmx3VEZKSFIyaHdVMWxqWlhka1kweGpUR3hLTjBkcVJVUkRjbEE1WkdOWlNIVlVOWGh6VjA1MlFVRnFaME56YmtONVVsVnBTd28xYlRZdlZrWkVNRmhKTm5NMVVTdENkM1E1U3l0TFYyZEdRazlRS3pnMU1GSkpMMkowVVd0cGIzQjNXV3RIYm1aSFV6aE1RVzk1THpOS1VHcFRNbFpxQ25SQksySlBNbkZPUmtRMk5XcHJRVEZXUTFaT1VURkhWV05wWmxkRFZrSjFjemQ0VDBJNE5EbFlPWE5SY3pGMlRXVlNOMHB2TTFkRVEwUTJhSGxOVm5jS2MyaENPVVpvWjNWdWRtbElRVk51Y0hKRFpYUTROSFpuYWxGcFpVNU1jMkZuUkhSMlJWRkpSRUZSUVVKQmIwbENRVUU0YTFZd01uSk5Tbm8zWkVkMmRRcHFORFJXZUdkTFZqUXhZbVJvTldJeFYwYzBUVEV6Y0VkWldUQnFhSGswT0RKa2JtcFVhVUpGTTNKU2JHWkxjSFZWUVZVMllXTmxWVFp3WkhreFUyMW5DbTgzWkVkYVJYQXpUMVZKVkVkU1JHSnhVR0ZzTHpCaUx6TjFZbWx1WWxSSGRucE1SVEZ1TDBoSWFrcEtabWhyZEhSd05ITk5jMjl6THlzNVFsWjRWbmNLVkVsR01uTjJWa1Z3WmtWdmVrdGhaMGhXYW5kcVVtZFpiVFpWTkZWYWVIVjJaRmcwVVhGdVVIRm5hVmgyZUd3eU5HeFhibkV6V25wYVQwSjJXa0p6Y2dwM1NWbERlRlJJWWprek5YbGplV3RMS3pKaEwxTlllRGRaUm5GTkwwRXdXbXMyWmxoMVRHeHVVME5wUkdSdlVsUjFWbTFtYWpjMU9VVkRVMjV1YzFCeENreE1hVnBxY1dwc2J6SlNaRlpSVlVOeVRrSk1MMHBGUjJ4aE5IZ3pkRUpxU21NdmFTdDJLekF2Tms1aVdtVm5aMk5tYlcxQk5USk5TRm8xVVVaVVZrb0tkRTkxT0RnMFJVTm5XVVZCTlZKd1FuSmFZazFXVW1sd1dVOVNPVkl4WVdjclZVeHhORlEzUW1sMU5XWkZXQzloZWtoemVsQmlUR0ZvYURaWVFuQjNTQW95YUZKa01XbDJObUZRVkZOSFRYbDFOR2M0WmtSM1owdzJOVE51VVZCVloxUlRURmxVV2xwb2NqUkNPRTUxYmxFMU9XOUZjREUzVW5VNWFIWkhOV1Z5Q204emNIZ3hNRXhRVUdaaUsyUnpNazU2UWxab2IwVlVNSGx5ZFcxbGNXbzFUemxNY1djeFVqRk1NbE5zWlc4M1ZTOXBVRVJMTUd0RFoxbEZRUzkxYkZVS1RHRnBObWRoWVN0VVV5dDRNVEowTlhWblZYaE5kRGROWkhSc2NsRkpjRkl4V2xsV04xQk1kVXBxVDJsSE1HaHdkM2RGWjNkcVdEVXZRMncxU1d0MVNRbzJWaXRKVjFWdFpGcERZbkZoTURsME9XcDZTVXB5TDFjMU5IcFJabmRUWWxsdE9YRjBPVVpZU0cxNWNFMXpUblZKSzBKb1IweENSRGh4UmpKQ1FVaFFDbXhXTkdwSFYxTkJSSG94Y2t0WVNGVkRkRTh4U21KUmMxSTRieXRqWkdGM05XTm1VMGhaYTBObldVVkJNMHc1YlRVd1lqQjZWVEk0TjI5S1lXWXJSbXdLY1RaamFIZEVWVU56WTFseGVtbGhLMmRQV2pSdlozUjVZVmRoVTB0TGEzaEhOVEJwUzFadmIzQjJZVEprV0ZSTVZWVkJNbk5tYjFReWEzaEZXbG9yVEFwS2VXWmhLMU01WTBsdmJWQndhVEl5ZGpVclptVnNSblpxZVhKc1N6bFpRbUZNZUhwamJrZExWa2M1YjBWeWNrOHhVVlZLUlhrNEswZDRWMmxRU0VGU0NqZGxWekZXZVU5TE5HdGFPRGs1UlcxUk1WaGpSMUpyUTJkWlFqa3pUMng1WW1ab1FUUm1jbVZyTm10ck5qSXdPRWQ1YjNseGRUSmlNVlJvZFhOd01EY0tZalZMT1RONWExWmtZazFhT0RSUk9VRTRZVkF2YVZSRWFrSnlRMmQ2WkVSMU5tSlJTakZtZFZKdlZFTnVXVW95TjFsWlMwVXZhbWhrV21KUk1FazJSUXBoVDNwNFprRjVaU3RvYjBVNVdtWm9XVkF5ZDA5blFXbDNabEpMWjBSYWJEQjNhRlJzYkhKbmNUTjJTa0lyYjJoMWJYbGpRa1F4UlRaVFozZ3ZNRnA1Q2k5c2JsSjFVVXRDWjBaTWNGWTVVQzg1Y21GbWJtUjBXRFZZZVZWMFQwMHZRbmt6UlZsbmJGbHZSMDlrUlhGTmFIaFlSeXQzUTFaQ1ZFSlZUMlJ6Y0V3S1RreGlVVkI0YW1KT1ZFMVFTakI2U0ZwcVppdDFhMHBvU1U5MGR6UmlUbk51YzNCa1NsTnpWMmRtTlhVeGRqZFBaMkUyVnpKMGFFRkNSelE1VEZGbFJ3cHRNWEZHUTJkTFpEZFpVRzlMUldKbGIwMXpTRXBSZUhCR2VYWnZSSE40VEZVNU0wOUVVblE1YVVGSFpFMUpZMll5Y25CTkNpMHRMUzB0UlU1RUlGSlRRU0JRVWtsV1FWUkZJRXRGV1MwdExTMHRDZz09Cg==  If the output contains newlines, then you can use base64 -w 0 ./kubeconfig\n Set the content after the base64 to PediaCluster spec.kubeconfig, in addition spec.apiserver and other authentication fields don’t need to set.\nHowever, since the cluster address is configured in kube config, the APIServer URL is empty when you use kubectl get pediacluster.\nkubectl get pediacluster # Output: NAME APISERVER URL VERSION STATUS cluster-1 v1.22.2 Healthy Mutating addmission webhooks will be added in the future to automatically set spec.apiserver, currently if you want to show the cluster apiserver address when kubectl get pediacluster, then you need to manually configure the spec.apiserver field additionally.\nUse ServiceAccount to import a cluster You can also choose to create a ServiceAccount in the Imported Cluster and configure the proper RBAC to import the cluster.\n# Connect the current kubectl to the imported cluster kubectl apply -f https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/main/examples/clusterpedia_synchro_rbac.yaml # Get CA and Token for Service Account SYNCHRO_CA=$(kubectl -n default get secret $(kubectl -n default get serviceaccount clusterpedia-synchro -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.ca\\.crt}') SYNCHRO_TOKEN=$(kubectl -n default get secret $(kubectl -n default get serviceaccount clusterpedia-synchro -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}') Fill $SYNCHRO_CA and SYNCHRO_TOKEN into spec.caData and spec.tokenData fields for the PediaCluster resource.\nCreate PediaCluster After completing the cluster authentication fields, you can get a complete PediaCluster resource and can directly use kubectl apply -f to create it.\neg.\napiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-examplespec:apiserver:https://10.6.100.10:6443caData:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==tokenData:ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrMHRSalJtZGpSdVgxcFljMGxsU1ZneFlXMHpPSFZOY0Zwbk1UTkhiVFpsVFZwQ2JIWk9SbU5XYW5NaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbU5zZFhOMFpYSndaV1JwWVMxemVXNWphSEp2TFhSdmEyVnVMVGsxYTJSNElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltTnNkWE4wWlhKd1pXUnBZUzF6ZVc1amFISnZJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpYSjJhV05sTFdGalkyOTFiblF1ZFdsa0lqb2lNREl5WXpNMk5USXRPR1k0WkMwME5qSmtMV0l6TnpFdFpUVXhPREF3TnpFeE9HUTBJaXdpYzNWaUlqb2ljM2x6ZEdWdE9uTmxjblpwWTJWaFkyTnZkVzUwT21SbFptRjFiSFE2WTJ4MWMzUmxjbkJsWkdsaExYTjVibU5vY204aWZRLkF4ZjhmbG5oR0lDYjJaMDdkT0FKUW11aHVIX0ZzRzZRSVY5Sm5sSmtPUnF5aGpWSDMyMkVqWDk1bVhoZ2RVQ2RfZXphRFJ1RFFpLTBOWDFseGc5OXpYRks1MC10ZzNfYlh5NFA1QnRFOUpRNnNraUt4dDFBZVJHVUF4bG5fVFU3SHozLTU5Vnl5Q3NwckFZczlsQWQwRFB6bTRqb1dyS1lKUXpPaGl5VjkzOWpaX2ZkS1BVUmNaMVVKVGpXUTlvNEFFY0hMdDlyTEJNMTk2eDRkbzA4ZHFaUnVtTzJZRXFkQTB3ZnRxZ2NGQzdtTGlSVVhkWElkYW9CY1BuWXBwM01MU3B5QjJQMV9vSlRFNS1nd3k4N2Jwb3U1RXo2TElSSExIeW5NWXAtWVRLR2hBbDJwMXdJb0tDZUNnQng4RlRfdzM4Rnh1TnE0UDRoQW5RUUh6bU9Ndw==syncResources:[]View Cluster After a cluster is successfully imported, you can use kubectl get pediacluster to view the imported clusters and check its status\nkubectl get pediacluster # Output: NAME APISERVER URL VERSION STATUS cluster-1 https://10.6.100.10:6443 v1.22.2 Healthy cluster-2 https://10.50.10.11:16443 v1.10.11 Healthy Next See Synchronize Cluster Resources\n","categories":"","description":"","excerpt":"Clusterpedia uses the custom resource - PediaCluster to represent the …","ref":"/docs/usage/import-clusters/","tags":"","title":"Import Clusters"},{"body":"We can require the number of remaining resources to be included in the response by search label or url query when querying.\n   search label url query     search.clusterpedia.io/with-remaining-count withRemainingCount     Detailed use can be referred to Response With Remaining Count\n You can set the number of remaining resources to be returned by default via Feature Gates – RemainingItemCount, so that the user does not need to use a search label or url query to display the request at each request.\nWhen the remaining item count is returned by default, you can still request that the remaining item count not be returned via search label or url query.\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?withRemainingCount=false\u0026limit=1\" | jq Feature Gate dedicated to clusterpedia apiserver\n   desc feature gate default     Set whether to return the number of remaining resources by default RemainingItemCount false    This feature is turned off by default because it may have an impact on the behavior or performance of the storage layer.\n For the default storage tier, returning the number of remaining resources results in an additional COUNT query\n ","categories":"","description":"","excerpt":"We can require the number of remaining resources to be included in the …","ref":"/docs/features/remaining-item-count/","tags":"","title":"Return RemainingItemCount"},{"body":"我们在查询时，可以通过 search label 或者 url query，要求在响应中携带剩余的资源数量。\n   search label url query     search.clusterpedia.io/with-continue withContinue     详细使用可以参考 响应携带剩余资源数量信息\n 可以通过 Feature Gates —— RemainingItemCount 来设置默认返回剩余的资源数量，这样用户就不需要在每次请求时使用 search label 或者 url query 来显示要求了。\n在默认返回剩余资源数量时，用于依然可以通过 search label 或者 url quera 来不返回剩余的资源数量\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?withRemainingCount=false\u0026limit=1\" | jq 专属于 clusterpedia apiserver 的 Feature Gate\n   作用 feature gate 默认值     设置是否默认返回剩余的资源数量 RemainingItemCount false    由于该功能可能会对存储层的行为或者性能有影响，所以默认关闭\n 对于默认存储层，返回剩余资源数量会导致额外的 COUNT 查询\n ","categories":"","description":"","excerpt":"我们在查询时，可以通过 search label 或者 url query，要求在响应中携带剩余的资源数量。\n   search label …","ref":"/zh-cn/docs/features/remaining_item_count/","tags":"","title":"返回剩余资源数量"},{"body":"Clusterpedia 的默认存储层支持 MySQL 和 PostgreSQL 两种存储组件。\n用户在安装 Clusterpedia 时，可以使用已存在的存储组件， 不过需要创建相应的默认存储层配置（ConfigMap）和存储组件密码 Secret。\n默认存储层配置 用户需要在 clusterpedia-system 命名空间下创建 clusterpedia-internalstorage ConfigMap。\n# internalstorage configmap exampleapiVersion:v1kind:ConfigMapmetadata:name:clusterpedia-internalstoragenamespace:clusterpedia-systemdata:internalstorage-config.yaml:|type: \"mysql\" host: \"clusterpedia-internalstorage-mysql\" port: 3306 user: root database: \"clusterpedia\" connPool: maxIdleConns: 10 maxOpenConns: 100 connMaxLifetime: 1h log: slowThreshold: \"100ms\" logger: filename: /var/log/clusterpedia/internalstorage.log maxbackups: 3internalstorage config 支持以下基本字段:\n   field description     type 存储组件的类型，支持 “postgres” 和 “mysql”   host 存储组件地址，可以使用 IP 或者 Service Name   port 存储组件端口   user 存储组件用户   password 存储组件密码   database Clusterpedia 所使用的 database    存储组件的访问密码，最好存放在 Secret，参考 配置存储组件密码 Secret\n数据库连接池配置    field description     connPool.maxIdleConns 空闲连接池中的最大数量，默认为 10   connPool.maxOpenConns 打开的数据库连接的最大数量，默认为 100   connPool.connMaxLifetime 连接可以复用的最大时间，默认为 1h    根据用户的当前环境，合理设置数据库连接池\n日志配置 支持配置存储层日志，通过 log 字段来开启日志打印慢 SQL 和错误\n   field description     log.stdout 打印日志到标准输出   log.colorful 是否开启彩色打印   log.slowThreshold 设置慢 SQL 阀值，例如 “100ms”   log.level 设置日志级别，支持 Slient, Error, Warn, Info   log.logger 日志轮滚配置    开启日志打印后，如果 log.stdout 不为 true，则将日志输出到 /var/log/clusterpedia/internalstorage.log 文件中\n日志轮滚配置 将存储层的日志保存到文件中，并且可以配置日志文件的轮滚\n   field description     log.logger.filename 日志文件路径, 默认为 /var/log/clusterpedia/internalstorage.log   log.logger.maxsize 触发日志轮滚的最大文件大小，单位为 MB   log.logger.maxage 轮滚的旧日志的最大存活时间   log.logger.maxbackups 轮滚的旧日志的最大数量   log.logger.localtime 是否为本地时间，默认为 UTC   log.logger.compress 是否将轮滚的日志文件进行压缩，默认不进行压缩    关闭日志打印 在 internalstorage config 不填写 log 字段，便会忽略日志打印，例如：\ntype:\"mysql\"host:\"clusterpedia-internalstorage-mysql\"port:3306user:rootdatabase:\"clusterpedia\"更多配置 默认存储层还提供了有关 MySQL 和 PostgreSQL 的更多配置，可以参考 internalstorage/config.go\n配置存储组件密码 Secret Clusterpedia 的安装 yaml 会从 internalstroage-password 的 Secret 中获取密码。\n将存储组件的密码配置到 Secret 中\nkubectl -n clusterpedia-system create secret generic \\  internalstorage-password --from-literal=password=\u003c存储组件访问密码\u003e ","categories":"","description":"","excerpt":"Clusterpedia 的默认存储层支持 MySQL 和 PostgreSQL 两种存储组件。\n用户在安装 Clusterpedia 时， …","ref":"/zh-cn/docs/installation/configurate/configurate-internalstorage/","tags":"","title":"配置存储层"},{"body":"Clusterpedia 使用自定义资源 PediaCluster 资源来代表接入的集群\napiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-examplespec:apiserver:\"https://10.30.43.43:6443\"kubeconfig:caData:tokenData:certData:keyData:syncResources:[]用户有两种方式来配置接入的集群:\n 直接配置 base64 编码的 kube config 到 kubeconfig 字段用于集群连接和验证 分别配置接入集群的地址，以及验证信息  在使用 apiserver 字段来设置接入集群的地址时，验证字段的配置有多种选择：\n caData + tokenData caData + certData + keyData   caData 在集群 APIServer 允许 Insecure 连接的情况下，也可以不填\n 这些验证字段都需要 base64 编码，如果这些字段的值是直接从 ConfigMap 或者 Secret 中获取的话，那么就已经 base64 过。\n使用 kube config 来接入集群 使用 kube config 来连接和验证集群是最简单的一种方式。\n首先需要将接入集群的 kube config base64 编码。\nbase64 ./kubeconfig # 输出 base64 编码后的配置 YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNdmFrTkRRV1ZoWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplRTFFYTNsT1JFVjNUVlJOZVU1R2IxaEVWRTE0VFVScmVVMXFSWGROVkUxNVRrWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVHk5VENuWnRhMVU1YmsxdVVsUklUM2x2SzNoamRGUkpZMGxQWW5NemMwRjVjVEkyZGpSUVlrVnRiM1pXTTJ4UE9WUXdNVEYyY0U5NlMwcHlPVUZ4ZVZaTVJuWUtWWEZCUkhCVGFrTTNXWGQzTW5ad1NsZDNiREV5U2xCdlVtMXhaMUZCU0ZOa1lsSnBVM0JEVERSdWRqbHZSMjVWT1dJMmRsbFdTeTlpUml0a1VWRkNTQXBuUTFoNk5uWm9UR1k0V21kMk4ydFVRMkpCZGtGUGFFOU9TbFUzTWxsWVRFOHpUMGxaUWpKdmExTkNSR0ZWVWpOdk5ucHdaR1ZXVGt0NVYwRXlOVkEzQ2tSb2JrOHlUazAxUXpscFJFUnFUVFJMWTJGVGEzSlBTa0p2YlVsc1NIRlpSalJ3VlhkVFRsRnZjR1ZHUlZSeVozWnpjVGt3U2tzMllVSlZTMHQ1YWpZS0syTkdkakkzUzBrNEsxWk1VRXRhU1RFMmMyNU1ibmcyUlhSVGF6WnRaakpYVEhkSlpsaHlRbGd3UkVzdllYQkVRMDE1UjJwRWIyZENhR3BKU1Zob1ZBcDJialZRWm5kRldVTnNkR1pGVEVoS1NrZFZRMEYzUlVGQllVNWFUVVpqZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVRTRSMEV4VldSRmQwVkNDaTkzVVVaTlFVMUNRV1k0ZDBoUldVUldVakJQUWtKWlJVWkpWRGhMUkhkQ2JVVnZNSGxhZFVGRVpraGtLelExTDNaRll6ZE5RbFZIUVRGVlpFVlJVVThLVFVGNVEwTnRkREZaYlZaNVltMVdNRnBZVFhkRVVWbEtTMjlhU1doMlkwNUJVVVZNUWxGQlJHZG5SVUpCVDBGNVZIUTRTM1pGTjBkdlJFaFFUMDlwZGdveVIySTJXV1ZzVVU1S2NVTXphMWRJT1hjMU5URk5hR1p2UzNaaU0yMVZhVVY2WlZNd09VTndaVVFyVEZoNVpubHFRemhaWWtKeFFqWlhTRmhOWldNckNucFBkRE5QYXpSWVYwRm1aVlZaVFhoT1ExRkpibGM0Y2pJNGNtWm5ibEVyYzFOQ2RIUXllRVJRTjFSWlkwOW9OVlpHWmtJMkszSnRUbUZUYmxaMU5qZ0tTRkZ4ZGxGTU5FRlhiVmhrUjA5alJXTkJSVGhZZGtkaU9XaHdTalZOY2tSSGR6UTBVVFl5T0c5WWF6WjBOMDFhV1RGT01VTlFkVzlIWjFWbVMxTjNiZ28xTVVGV1JURk9WVmROVjB0RVFYaGFhMkk0YkVodlIzVldhREZ6V21kM1NuSlJRalI1Y2xoMWNteEdOMFkyYlZSbFltNHJjRFZLTTB0b1QwVjRLemxzQ2pGWGRrd3diV2t4TDFKMmJWSktObTExWW10aldVd3pOMUZKV2pJMVlYZHlhRVpNTjBaMWVqTlJTVEZxVFRkWU1IWkVUMlZVTTJWdVZVRkNaVzVTTVM4S1VubG5QUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09CiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTAuNi4xMDAuMTA6NjQ0MwogIG5hbWU6IGt1YmVybmV0ZXMKY29udGV4dHM6Ci0gY29udGV4dDoKICAgIGNsdXN0ZXI6IGt1YmVybmV0ZXMKICAgIHVzZXI6IGt1YmVybmV0ZXMtYWRtaW4KICBuYW1lOiBrdWJlcm5ldGVzLWFkbWluQGt1YmVybmV0ZXMKY3VycmVudC1jb250ZXh0OiBrdWJlcm5ldGVzLWFkbWluQGt1YmVybmV0ZXMKa2luZDogQ29uZmlnCnByZWZlcmVuY2VzOiB7fQp1c2VyczoKLSBuYW1lOiBrdWJlcm5ldGVzLWFkbWluCiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSSlZFTkRRV2R0WjBGM1NVSkJaMGxKV2s0eVNscE5TbnAwU21kM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUVlJCTlUxcVVYaE5SRVY2VFdwU1lVWjNNSGxOYWtFMVRXcFJlRTFFUlhwTmFtaGhUVVJSZUFwR2VrRldRbWRPVmtKQmIxUkViazQxWXpOU2JHSlVjSFJaV0U0d1dsaEtlazFTYTNkR2QxbEVWbEZSUkVWNFFuSmtWMHBzWTIwMWJHUkhWbnBNVjBackNtSlhiSFZOU1VsQ1NXcEJUa0puYTNGb2EybEhPWGN3UWtGUlJVWkJRVTlEUVZFNFFVMUpTVUpEWjB0RFFWRkZRVFZEUkdSYVdIcEliMXAxVVRKeFJEZ0tTakpRZGtWdWEyTk1UV05RVG14RE1DOVRTR1YzV25kME5FRjRLM2RDWTFSSVJ6aGpWakJhZUZSYVQwdDNPSFJ4UWxrMk1tcGtOM1p4VkdoeFRWbHdad3AyYzNwSFVXeHlXbGRyZHpSUmFrUldORnBLY1dSbFRITkRVV3BqZUZsa05Ea3JSalEyYkVsS1VUSjVjRXhTUjBkb2NGTlpZMlYzWkdOTVkweHNTamRIQ21wRlJFTnlVRGxrWTFsSWRWUTFlSE5YVG5aQlFXcG5RM051UTNsU1ZXbExOVzAyTDFaR1JEQllTVFp6TlZFclFuZDBPVXNyUzFkblJrSlBVQ3M0TlRBS1Vra3ZZblJSYTJsdmNIZFphMGR1WmtkVE9FeEJiM2t2TTBwUWFsTXlWbXAwUVN0aVR6SnhUa1pFTmpWcWEwRXhWa05XVGxFeFIxVmphV1pYUTFaQ2RRcHpOM2hQUWpnME9WZzVjMUZ6TVhaTlpWSTNTbTh6VjBSRFJEWm9lVTFXZDNOb1FqbEdhR2QxYm5acFNFRlRibkJ5UTJWME9EUjJaMnBSYVdWT1RITmhDbWRFZEhaRlVVbEVRVkZCUW04eFdYZFdSRUZQUW1kT1ZraFJPRUpCWmpoRlFrRk5RMEpoUVhkRmQxbEVWbEl3YkVKQmQzZERaMWxKUzNkWlFrSlJWVWdLUVhkSmQwUkJXVVJXVWpCVVFWRklMMEpCU1hkQlJFRm1RbWRPVmtoVFRVVkhSRUZYWjBKVFJTOURaemhCV21oTFRrMXRZbWRCTTNnelpuVlBaamQ0U0FwUGVrRk9RbWRyY1docmFVYzVkekJDUVZGelJrRkJUME5CVVVWQk5XNWlRME5LYTBwTk5qQkRjVlZsZFdWVVUwbzBaRXBWWkc5S1NHVkhVblJGTWtKRkNrOVNXWEJIVUVVMllqUk5VVlJYY3pSbFZrOTFiRlUzYnpabU9WZFFVV1pDWm5JMmVGSlBXRFo1YUVoM2NIcDNkRVpVVW1od1lqaE5TVWxKV2pscWRqWUtaVVZ3TXpoWmFtUnBPVkV3SzBSaFkzRkxka0pVTURsMVEzWmtNR2x3UnpkTFNuVlNibkZMVVd4VWNtVnRkWFJsVGpOMk9HOUNTVGxXWjJsc2JXUllaZ3BwWkdGS1lqUlJaelpZVkdvemNFMUdkbFpqWTNOSGFWZG9UMHh5T1ZaSVZDdFFWazVaTjB4WlVHeG1Xa2RETkRCSk1URmlTVFZuUlZadVUydHZNa1JqQ21Od1NXOHJNbmRWZFRGU1IybExZMUp3V0RSb1FtUnBORWxYYlM4ek5sTXhaM2gzTW1KMFdFOWxNV3Q2T1c5SFlVNVplazVXU1VObkwzZDNiRzVEYVVNS2FtWjRiVFJJZWtOR1NXcHZRMGRxVFdWWVJFMVhieTlGT0d0U2RuaDFhMnQzYlc1MWN6aHpVV05FTVcxUkswZFFlbWM5UFFvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2c9PQogICAgY2xpZW50LWtleS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFwTlNVbEZiM2RKUWtGQlMwTkJVVVZCTlVORVpGcFlla2h2V25WUk1uRkVPRW95VUhaRmJtdGpURTFqVUU1c1F6QXZVMGhsZDFwM2REUkJlQ3QzUW1OVUNraEhPR05XTUZwNFZGcFBTM2M0ZEhGQ1dUWXlhbVEzZG5GVWFIRk5XWEJuZG5ONlIxRnNjbHBYYTNjMFVXcEVWalJhU25Ga1pVeHpRMUZxWTNoWlpEUUtPU3RHTkRac1NVcFJNbmx3VEZKSFIyaHdVMWxqWlhka1kweGpUR3hLTjBkcVJVUkRjbEE1WkdOWlNIVlVOWGh6VjA1MlFVRnFaME56YmtONVVsVnBTd28xYlRZdlZrWkVNRmhKTm5NMVVTdENkM1E1U3l0TFYyZEdRazlRS3pnMU1GSkpMMkowVVd0cGIzQjNXV3RIYm1aSFV6aE1RVzk1THpOS1VHcFRNbFpxQ25SQksySlBNbkZPUmtRMk5XcHJRVEZXUTFaT1VURkhWV05wWmxkRFZrSjFjemQ0VDBJNE5EbFlPWE5SY3pGMlRXVlNOMHB2TTFkRVEwUTJhSGxOVm5jS2MyaENPVVpvWjNWdWRtbElRVk51Y0hKRFpYUTROSFpuYWxGcFpVNU1jMkZuUkhSMlJWRkpSRUZSUVVKQmIwbENRVUU0YTFZd01uSk5Tbm8zWkVkMmRRcHFORFJXZUdkTFZqUXhZbVJvTldJeFYwYzBUVEV6Y0VkWldUQnFhSGswT0RKa2JtcFVhVUpGTTNKU2JHWkxjSFZWUVZVMllXTmxWVFp3WkhreFUyMW5DbTgzWkVkYVJYQXpUMVZKVkVkU1JHSnhVR0ZzTHpCaUx6TjFZbWx1WWxSSGRucE1SVEZ1TDBoSWFrcEtabWhyZEhSd05ITk5jMjl6THlzNVFsWjRWbmNLVkVsR01uTjJWa1Z3WmtWdmVrdGhaMGhXYW5kcVVtZFpiVFpWTkZWYWVIVjJaRmcwVVhGdVVIRm5hVmgyZUd3eU5HeFhibkV6V25wYVQwSjJXa0p6Y2dwM1NWbERlRlJJWWprek5YbGplV3RMS3pKaEwxTlllRGRaUm5GTkwwRXdXbXMyWmxoMVRHeHVVME5wUkdSdlVsUjFWbTFtYWpjMU9VVkRVMjV1YzFCeENreE1hVnBxY1dwc2J6SlNaRlpSVlVOeVRrSk1MMHBGUjJ4aE5IZ3pkRUpxU21NdmFTdDJLekF2Tms1aVdtVm5aMk5tYlcxQk5USk5TRm8xVVVaVVZrb0tkRTkxT0RnMFJVTm5XVVZCTlZKd1FuSmFZazFXVW1sd1dVOVNPVkl4WVdjclZVeHhORlEzUW1sMU5XWkZXQzloZWtoemVsQmlUR0ZvYURaWVFuQjNTQW95YUZKa01XbDJObUZRVkZOSFRYbDFOR2M0WmtSM1owdzJOVE51VVZCVloxUlRURmxVV2xwb2NqUkNPRTUxYmxFMU9XOUZjREUzVW5VNWFIWkhOV1Z5Q204emNIZ3hNRXhRVUdaaUsyUnpNazU2UWxab2IwVlVNSGx5ZFcxbGNXbzFUemxNY1djeFVqRk1NbE5zWlc4M1ZTOXBVRVJMTUd0RFoxbEZRUzkxYkZVS1RHRnBObWRoWVN0VVV5dDRNVEowTlhWblZYaE5kRGROWkhSc2NsRkpjRkl4V2xsV04xQk1kVXBxVDJsSE1HaHdkM2RGWjNkcVdEVXZRMncxU1d0MVNRbzJWaXRKVjFWdFpGcERZbkZoTURsME9XcDZTVXB5TDFjMU5IcFJabmRUWWxsdE9YRjBPVVpZU0cxNWNFMXpUblZKSzBKb1IweENSRGh4UmpKQ1FVaFFDbXhXTkdwSFYxTkJSSG94Y2t0WVNGVkRkRTh4U21KUmMxSTRieXRqWkdGM05XTm1VMGhaYTBObldVVkJNMHc1YlRVd1lqQjZWVEk0TjI5S1lXWXJSbXdLY1RaamFIZEVWVU56WTFseGVtbGhLMmRQV2pSdlozUjVZVmRoVTB0TGEzaEhOVEJwUzFadmIzQjJZVEprV0ZSTVZWVkJNbk5tYjFReWEzaEZXbG9yVEFwS2VXWmhLMU01WTBsdmJWQndhVEl5ZGpVclptVnNSblpxZVhKc1N6bFpRbUZNZUhwamJrZExWa2M1YjBWeWNrOHhVVlZLUlhrNEswZDRWMmxRU0VGU0NqZGxWekZXZVU5TE5HdGFPRGs1UlcxUk1WaGpSMUpyUTJkWlFqa3pUMng1WW1ab1FUUm1jbVZyTm10ck5qSXdPRWQ1YjNseGRUSmlNVlJvZFhOd01EY0tZalZMT1RONWExWmtZazFhT0RSUk9VRTRZVkF2YVZSRWFrSnlRMmQ2WkVSMU5tSlJTakZtZFZKdlZFTnVXVW95TjFsWlMwVXZhbWhrV21KUk1FazJSUXBoVDNwNFprRjVaU3RvYjBVNVdtWm9XVkF5ZDA5blFXbDNabEpMWjBSYWJEQjNhRlJzYkhKbmNUTjJTa0lyYjJoMWJYbGpRa1F4UlRaVFozZ3ZNRnA1Q2k5c2JsSjFVVXRDWjBaTWNGWTVVQzg1Y21GbWJtUjBXRFZZZVZWMFQwMHZRbmt6UlZsbmJGbHZSMDlrUlhGTmFIaFlSeXQzUTFaQ1ZFSlZUMlJ6Y0V3S1RreGlVVkI0YW1KT1ZFMVFTakI2U0ZwcVppdDFhMHBvU1U5MGR6UmlUbk51YzNCa1NsTnpWMmRtTlhVeGRqZFBaMkUyVnpKMGFFRkNSelE1VEZGbFJ3cHRNWEZHUTJkTFpEZFpVRzlMUldKbGIwMXpTRXBSZUhCR2VYWnZSSE40VEZVNU0wOUVVblE1YVVGSFpFMUpZMll5Y25CTkNpMHRMUzB0UlU1RUlGSlRRU0JRVWtsV1FWUkZJRXRGV1MwdExTMHRDZz09Cg==  如果 base64 后存在换行，那么可以使用 base64 -w 0 ./kubeconfig\n 将 base64 后的内容设置到 PeidaCluster 的 spec.kubeconfig 中即可，并且 spec.apiserver 以及其他验证字段都不需要填写\n不过由于集群地址在 kube config 中配置，所以使用 kubectl get pediacluster 时 APIServer 为空\nkubectl get pediacluster # 输出： NAME APISERVER URL VERSION STATUS cluster-1 v1.22.2 Healthy 未来会增加 Mutating admission webhooks 来自动设置 spec.apiserver，当前如果用户想要在 kubectl get 时显示集群地址，那么需要手动额外配置 spec.apiserver 字段\n使用 ServiceAccount 来接入集群 用户也可以选择在被接入集群中创建 ServiceAccount 并配置相应的 RBAC 来接入集群。\n# 注意：当前 kubectl 连接到被接入集群 kubectl apply -f https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/main/examples/clusterpedia_synchro_rbac.yaml # 获取 Service Account 对应 CA 和 Token SYNCHRO_CA=$(kubectl -n default get secret $(kubectl -n default get serviceaccount clusterpedia-synchro -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.ca\\.crt}') SYNCHRO_TOKEN=$(kubectl -n default get secret $(kubectl -n default get serviceaccount clusterpedia-synchro -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}') 将 $SYNCHRO_CA 和 $SYNCHRO_TOKEN 分别填写到 PediaCluster 资源的 spec.caData 和 spec.tokenData 字段中\n创建 PediaCluster 完善集群的验证信息后，就可以获得一个完整的 PediaCluster 资源了。直接使用 kubectl apply -f 直接创建即可\neg.\napiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-examplespec:apiserver:https://10.6.100.10:6443caData:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==tokenData:ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrMHRSalJtZGpSdVgxcFljMGxsU1ZneFlXMHpPSFZOY0Zwbk1UTkhiVFpsVFZwQ2JIWk9SbU5XYW5NaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbU5zZFhOMFpYSndaV1JwWVMxemVXNWphSEp2TFhSdmEyVnVMVGsxYTJSNElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltTnNkWE4wWlhKd1pXUnBZUzF6ZVc1amFISnZJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpYSjJhV05sTFdGalkyOTFiblF1ZFdsa0lqb2lNREl5WXpNMk5USXRPR1k0WkMwME5qSmtMV0l6TnpFdFpUVXhPREF3TnpFeE9HUTBJaXdpYzNWaUlqb2ljM2x6ZEdWdE9uTmxjblpwWTJWaFkyTnZkVzUwT21SbFptRjFiSFE2WTJ4MWMzUmxjbkJsWkdsaExYTjVibU5vY204aWZRLkF4ZjhmbG5oR0lDYjJaMDdkT0FKUW11aHVIX0ZzRzZRSVY5Sm5sSmtPUnF5aGpWSDMyMkVqWDk1bVhoZ2RVQ2RfZXphRFJ1RFFpLTBOWDFseGc5OXpYRks1MC10ZzNfYlh5NFA1QnRFOUpRNnNraUt4dDFBZVJHVUF4bG5fVFU3SHozLTU5Vnl5Q3NwckFZczlsQWQwRFB6bTRqb1dyS1lKUXpPaGl5VjkzOWpaX2ZkS1BVUmNaMVVKVGpXUTlvNEFFY0hMdDlyTEJNMTk2eDRkbzA4ZHFaUnVtTzJZRXFkQTB3ZnRxZ2NGQzdtTGlSVVhkWElkYW9CY1BuWXBwM01MU3B5QjJQMV9vSlRFNS1nd3k4N2Jwb3U1RXo2TElSSExIeW5NWXAtWVRLR2hBbDJwMXdJb0tDZUNnQng4RlRfdzM4Rnh1TnE0UDRoQW5RUUh6bU9Ndw==syncResources:[]集群查看 集群接入成功后，可以通过 kubectl get pediacluster 命令来查看所有接入的集群，以及集群状态\nkubectl get pediacluster # 输出： NAME APISERVER URL VERSION STATUS cluster-1 https://10.6.100.10:6443 v1.22.2 Healthy cluster-2 https://10.50.10.11:16443 v1.10.11 Healthy 接下来 继续查看 同步集群资源\n","categories":"","description":"","excerpt":"Clusterpedia 使用自定义资源 PediaCluster …","ref":"/zh-cn/docs/usage/import-clusters/","tags":"","title":"集群接入"},{"body":"Different users may have different needs, and although clusterpedia provides many easy search options, such as specifying a set of namespaces or clusters, or specifying an owner for a query, users may still have more complex queries.\nIn this case, you can use the Raw SQL Query provided by the default storage layer to pass more complex search conditions.\nURL=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments\" kubectl get --raw=\"$URL?whereSQL=(cluster='global') OR (namespace IN ('kube-system','default'))\" In the example, we pass a SQL statement for a WHERE query —— (cluster=‘global’) OR (namespace IN (‘kube-system’,‘default’)),\nThis statement will retrieve deployments under all namespaces in the global cluster and under the kube-system and default namespaces in other clusters.\nThe sql statement needs to conform to the SQL syntax of the specific storage component(MySQL, PostgreSQL).\nThis feature gate is exclusive to the clusterpedia apiserver\n   desc feature gates 默认值     Allow search conditions to be set using raw SQL AllowRawSQLQuery false    Raw SQL queries are currently in alpha and are not well protected against SQL injection, so you need to enable this feature via Feature Gate.\n","categories":"","description":"","excerpt":"Different users may have different needs, and although clusterpedia …","ref":"/docs/features/raw-sql-query/","tags":"","title":"Raw SQL Query"},{"body":"The main function of Clusterpedia is to provide complex search for resources in multiple clusters.\nClusterpedia uses the PediaCluster resource to specify which resources in the cluster need to support complex search, and synchronizes these resources onto the Storage Component via Storage Layer in real time.\n# exampleapiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-examplespec:apiserver:\"https://10.30.43.43:6443\"syncResources:- group:appsresources:- deployments- group:\"\"resources:- pods- configmaps- group:cert-manager.ioversions:- v1resources:- certificatesSynchronize built-in resources In order to manage and view these synchronized resources through PediaCluster, you need to configure resources in groups\nsyncResources:- group:appsversions:[]resources:- deployments- daemonsetsFor built-in resources, versions is not required.\nClusterpedia will automatically select the appropriate version to synchronize based on the resource version supported in the cluster.\nAlso, you do not need to worry about version conversion because Clusterpedia will open all version interfaces for built-in resources.\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } } Clusterpedia supports three versions of Deployment: v1, v1beta2, and v1beta1.\nSynchronize custom resources Compared with built-in resources, custom resources have slightly different configuration on resource versions.\nsyncResources: - group: cert-manager.io versions: [] resources: - certificates You can also ignore the versions field and then Clusterpedia will synchronize the previous three cluster versions in the Group.\nTake cert-manager.io as an example to get the Group supported by cert-manager.io in an imported cluster\n# Run the command in an imported cluster kubectl get --raw=\"/apis/cert-manager.io\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"cert-manager.io\", \"versions\": [ { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"cert-manager.io/v1beta1\", \"version\": \"v1beta1\" }, { \"groupVersion\": \"cert-manager.io/v1alpha3\", \"version\": \"v1alpha3\" }, { \"groupVersion\": \"cert-manager.io/v1alpha2\", \"version\": \"v1alpha2\" } ], \"preferredVersion\": { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } } The imported cluster supports four versions for cert-manager.io: v1, v1beta1, v1alpha3, v1alpha2.\nWhen syncResources.[group].versions is left blank, Clusterpedia will synchronize three versions v1, v1beta1, v1alpah3 in the order of the APIGroup.versions list except for v1alpha2.\nSpecify a sync version for custom resources If you specified versions, the specific resource would be synchronized by versions.\nsyncResources:- group:cert-manager.ioversions:- v1beta1resources:- certificatesThe above snippet only synchronizes v1beta1.\nUsage notes The custom resource synchronization does not support version conversion currently. The versions are fixed after synchronization.\nIf cluster-1 only synchronizes v1beta1 resources when you are searching for multi-cluster resources, the request to search for version v1 will ignore the version v1beta1.\nYou are required to learn and handle the different versions in multiple clusters for custom resources.\nSync all custom resources The custom resource types and versions change with the CRD, so when a CRD is created and we don’t want to modify spec.syncResources to sync resources as the same time, we can set spec.syncAllCustomResources to sync all custom resources.\nspec:syncAllCustomResources:trueHowever, it should be noted that to use this feature, you need to enabled the corresponding Feature Gate in clustersynchro-manager, which can be found in Sync All Custom Resource\nUsing wildcards to sync resources Group Wildcard spec:syncResources:- group:\"apps\"resources:- \"*\"Use Group Wildcard to sync all types of resources under the specified group.\nIn the above example, all resources under apps will be synced.\nAll-resources Wildcard spec:syncResources:- group:\"*\"resources:- \"*\"The All-resources Wildcard allows we to sync built-in resources, custom resources and aggregated API resources in the imported cluster.\nThis feature creates a large number of long connections, so use it with caution and enable the corresponding Feature Gate in the clustersynchro-manager, as described in Sync All Resources\nView synchronized resources You can view resources, sync versions, and storage versions by using Status of the PediaCluster resource.\nFor Status, a resource may have Sync Version and Storage Version:\n Sync Version refers to the resource version from a synchronized cluster by Clusterpedia Storage Version refers to the version stored at the storage layer by Clusterpedia  status:syncResources:- group:appsresources:- name:deploymentskind:Deploymentnamespaced:truesyncConditions:- lastTransitionTime:\"2022-01-13T04:34:08Z\"status:SyncingstorageVersion:v1version:v1In general, Sync Version is same as Storage Version for a cluster resource.\nHowever, if an imported cluster only provides the Deployment resource of the v1beta1 version, the Sync Version is v1beta1 and the Storage Version is v1.\nFor example, when synchronizing a Deployment of Kubernetes 1.10, the synchronization status is as follows:\nstatus:syncResources:- group:appsresources:- name:deploymentskind:Deploymentnamespaced:truesyncConditions:- lastTransitionTime:\"2022-01-13T04:34:04Z\"status:SyncingstorageVersion:v1version:v1beta1For a custom resource, Synchronized Version is same as Storage Version\nNext After resource synchronization, you can Access the Clusterpedia to Search for Resources\n","categories":"","description":"","excerpt":"The main function of Clusterpedia is to provide complex search for …","ref":"/docs/usage/sync-resources/","tags":"","title":"Synchronize Cluster Resources"},{"body":"不同的用户的需求可能是不同的，尽管 clusterpedia 提供了很多简便的检索条件，例如指定一组命名空间或者资源名称，也可以指定 owner 进行查询，但是用户依然可能会有更加复杂的查询。\n这时，用户可以使用默认存储层提供的 原生 SQL 条件查询 来传递更加复杂的检索条件\nURL=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments\" kubectl get --raw=\"$URL?whereSQL=(cluster='global') OR (namespace IN ('kube-system','default'))\" 示例中，我们传递一个用于 WHERE 查询的 SQL 语句 —— (cluster=‘global’) OR (namespace IN (‘kube-system’,‘default’)),\n这个语句会检索 global 集群内所有命名空间下以及其他集群中 kube-system 和 default 命名空间下的 deployments。\nsql 语句需要符合具体的存储组件的 SQL 语法\n该特性门控专属于 clusterpedia apiserver\n   作用 feature gates 默认值     允许使用原生 SQL 设置检索条件 AllowRawSQLQuery false    原生 SQL 查询当前还在 alpha 阶段，并且对 SQL 注入没有很好的防范，所以需要用户通过 Feature Gates 来开启该功能\n","categories":"","description":"","excerpt":"不同的用户的需求可能是不同的，尽管 clusterpedia 提供了很多简便的检索条件，例如指定一组命名空间或者资源名称， …","ref":"/zh-cn/docs/features/raw_sql_query/","tags":"","title":"原生 SQL 查询"},{"body":"Clusterpedia 的主要功能，便是提供对多集群内的资源进行复杂检索。\n通过 PediaCluster 资源来指定该集群中哪些资源需要支持复杂检索，Clusterpedia 会将这些资源实时的通过存储层同步到存储组件中\n# exampleapiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-examplespec:apiserver:\"https://10.30.43.43:6443\"syncResources:- group:appsresources:- deployments- group:\"\"resources:- pods- configmaps- group:cert-manager.ioversions:- v1resources:- certificates内置资源同步 PediaCluster 为了方便管理和查看这些同步的资源，用户需要以 Group 为单位来配置资源\nsyncResources:- group:appsversions:[]resources:- deployments- daemonsets对于内置资源，不需要填写 versions 字段。\nClusterpedia 会根据该集群内所支持的资源版本自动选择合适的版本来收集， 并且用户无需担心版本转换的问题， Clusterpedia 会开放出该内置资源的所有版本接口。\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } } 可以看到 Clusterpedia 支持 v1，v1beta2，v1beta1 三个版本的 Deployment\n自定义资源同步 相比内置资源，自定义资源在资源版本的配置上会稍有不同。\nsyncResources: - group: cert-manager.io versions: [] resources: - certificates 用户同样可以忽略 versions 字段，这时 Clusterpedia 就会同步该 Group 在该集群的前三个版本。\n以 cert-manager.io 为例，获取被接入集群中 cert-manager.io 支持的 Group\n# 在被接入集群内执行 kubectl get --raw=\"/apis/cert-manager.io\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"cert-manager.io\", \"versions\": [ { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"cert-manager.io/v1beta1\", \"version\": \"v1beta1\" }, { \"groupVersion\": \"cert-manager.io/v1alpha3\", \"version\": \"v1alpha3\" }, { \"groupVersion\": \"cert-manager.io/v1alpha2\", \"version\": \"v1alpha2\" } ], \"preferredVersion\": { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } } 可以看到，被接入集群支持 cert-manager.io 的 v1，v1beta1，v1alpha3，v1alpha2 四个版本。\n当 syncResources.[group].versions 为空时，Clusterpedia 就会以 APIGroup.versions 列表的顺序，收集 v1， v1beta1，v1alpah3 三个版本，而 v1alpha2 不会被收集\n指定自定义资源的同步版本 如果用户指定了 versions，那么就会按照 versions 的配置来收集指定的版本资源。\nsyncResources:- group:cert-manager.ioversions:- v1beta1resources:- certificates这时，只会收集 v1beta1 版本。\n使用注意 自定义资源收集暂时不支持版本转换，收集了哪些版本，那么就只支持哪些资源版本的收集。\n这时在检索多集群资源时，如果 cluster-1 只收集了 v1beta1 版本的资源，而检索请求 v1 版本的资源便会忽略 cluster-1 所收集的 v1beta1 版本\n需要用户去协调处理自定义资源在多个集群内的版本情况\n同步所有的自定义资源 自定义资源类型和版本会随着 CRD 进行变动，当一个 CRD 被创建时，我们不想同时修改 spec.syncResources 来同步资源，这时我们就可以设置 spec.syncAllCustomResources 来同步所有的自定义资源\nspec:syncAllCustomResources:true但是需要注意，使用该功能需要在 clustersynchro-manager 中开启相应的 Feature Gate，具体操作可以参考 同步所有自定义资源\n使用通配符来同步资源 使用通配符，收集指定组下的所有类型资源 spec:syncResources:- group:\"apps\"resources:- \"*\"通过组通配符可以收集指定的 Group 下的所有类型的资源。\n例如上例中，便会同步 apps 下的所有资源\n使用通配符，收集所有类型的资源 spec:syncResources:- group:\"*\"resources:- \"*\"通过全资源通配符 可以同步集群中的内置资源，自定义资源以及聚合式 API 资源。\n使用该功能会创建大量的长连接，所以需要谨慎使用，并且在 clustersynchro-manager 中开启相应的 Feature Gate, 具体操作可以参考 同步所有资源\n查看资源同步状态 我们可以通过 PediaCluster 资源的 Status 来查看资源的信息，同步的资源版本和状态以及存储版本\n在 Status 中，资源会有同步版本和存储版本：\n 同步版本是 Clusterpedia 从被同步集群中获取到的资源的版本 存储版本是 Clusterpedia 存储到存储层中的版本  status:syncResources:- group:appsresources:- name:deploymentskind:Deploymentnamespaced:truesyncConditions:- lastTransitionTime:\"2022-01-13T04:34:08Z\"status:SyncingstorageVersion:v1version:v1通常集群资源的同步版本和存储版本是相同的。\n但是当接入一个比较老的集群时，集群只提供了 v1beta1 版本的 Deployment 资源，而这时资源的同步版本为 v1beta1，存储版本为 v1\n例如，同步 1.10 版本 Kubernetes 的 Deployment 时，同步状态为：\nstatus:syncResources:- group:appsresources:- name:deploymentskind:Deploymentnamespaced:truesyncConditions:- lastTransitionTime:\"2022-01-13T04:34:04Z\"status:SyncingstorageVersion:v1version:v1beta1对于自定义资源来说，同步版本和存储版本是一致的\n接下来 资源同步完成后，便可以访问 Clusterpedia来检索资源\n","categories":"","description":"","excerpt":"Clusterpedia 的主要功能，便是提供对多集群内的资源进行复杂检索。\n通过 PediaCluster 资源来指定该集群中哪些资源需要 …","ref":"/zh-cn/docs/usage/sync-resources/","tags":"","title":"同步集群资源"},{"body":"There are some fields in the resource’s metadata that are usually not very useful in the actual search, so we prune these fields by default when syncing.\nWe use feature gates to separately control whether thess fields are prunned during resource synchronization, these feature gates are exclusive to the clustersynchro manager component\n   field feature gates default     metadata.managedFields PruneManagedFields true   metadata.annotations[‘lastAppliedConfiguration’] PruneLastAppliedConfiguration true    ","categories":"","description":"","excerpt":"There are some fields in the resource’s metadata that are usually not …","ref":"/docs/features/prune-fields/","tags":"","title":"Resource Field Pruning"},{"body":"资源的 metadata 中有一些字段在实际搜索中通常没有太大用处，所以在同步时我们会默认裁剪这些字段。\n我们使用特性门控来分别控制这些字段是否在资源同步时被裁剪，这些特性门控专属于 clustersynchro manager 组件\n   field feature gates 默认值     metadata.managedFields PruneManagedFields true   metadata.annotations[‘lastAppliedConfiguration’] PruneLastAppliedConfiguration true    ","categories":"","description":"","excerpt":"资源的 metadata 中有一些字段在实际搜索中通常没有太大用处，所以在同步时我们会默认裁剪这些字段。\n我们使用特性门控来分别控制这些字段 …","ref":"/zh-cn/docs/features/prune_fields/","tags":"","title":"资源字段裁剪"},{"body":"Clusterpedia has two main components:\n ClusterSynchroManager manages the PediaCluster resource in the master cluster, connects to the specified cluster through the PediaCluster authentication information, and synchronizes the corresponding resources in real time. APIServer also listens to the PediaCluster resource in the master cluster and provides complex search for resources in a compatible Kubernetes OpenAPI manner based on the resources synchronized by the cluster.  Also, the Clusterpedia APIServer will be registered to the master cluster APIServer in the way of Aggregation API, so that we can access Clusterpedia through the same entry as the master cluster.\nResources and Collection Resource Clusterpedia APIServer will provide two different resources to search under Group - clusterpedia.io:\nkubectl api-resources | grep clusterpedia.io # Output: NAME SHORTNAMES APIVERSION NAMESPACED KIND collectionresources clusterpedia.io/v1beta1 false CollectionResource resources clusterpedia.io/v1beta1 false Resources  Resources is used to specify a resource type to search for, compatible with Kubernetes OpenAPI CollectionResource is used to search for new resource aggregated by different types to find multiple resource types at one time   For concepts and usage about Collection Resource, refer to What is Collection Resource and Search for Collection Resource.\n Access the Clusterpedia resources When searching for a resource of a specific type, you can request it according to the Get/List specification of Kubernetes OpenAPI. In this way we can not only use the URL to access Clusterpedia resources, but also directly use kubectl or client-go to search for the resources.\nClusterpedia uses URL Path to distinguish whether the request is a multi-cluster resource or a specific cluster:\nMulti-cluster resource path, directly prefix the Resources path:\n/apis/clusterpedia.io/v1beta1/resources\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/version\" Specific cluster resource path, specify a cluster by setting the resource name based on the Resources path /apis/clusterpedia.io/v1beta1/resources/clusters/\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/version\" Regardless of a resource path of multiple clusters or a specific cluster, the path can be spliced and followed by Kubernetes Get/List Path\nConfigure the cluster shortcut for kubectl Although we can use URLs to access Clusterpedia resources, if we want to use kubectl to query more conveniently, we need to configure the kubeconfig cluster.\nClusterpedia provides a simple script to generate cluster config in the kubeconfig.\ncurl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.3.0/hack/gen-clusterconfigs.sh | sh - # Output: Current Context: kubernetes-admin@kubernetes Current Cluster: kubernetes Server: https://10.6.100.10:6443 TLS Server Name: Insecure Skip TLS Verify: Certificate Authority: Certificate Authority Data: *** Cluster \"clusterpedia\" set. Cluster \"cluster-1\" set. Cluster \"cluster-2\" set.  Check the script from hack/gen-clusterconfigs.sh\n The script prints the current cluster information and configures the PediaCluster into kubeconfig.\ncat ~/.kube/config # .kube/config- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1name:cluster-1- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-2name:cluster-2- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/clusterpedia.io/v1beta1/resourcesname:clusterpedia- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443name:kubernetesThe script generates clusterpedia clusters for multi-cluster access and other cluster configs in the name of PediaCluster, and reuses the master cluster’s entry and authentication information when accessing Clusterpedia.\nCompared with the master cluster entry, it only adds Clusterpedia Resources path.\nAfter multi-cluster kubeconfig is generated, you can use kubectl --cluster to specify the cluster access\n# Supported resources for multi-cluster search kubectl --cluster clusterpedia api-resources # Supported resources for cluster-1 search kubectl --cluster cluster-1 api-resources What resources are supported for search We can get the global and specific resource information according to the URL path.\nGlobal resource information is the union of resource types that are synchronized across all clusters\nDiscovery API opened by Clusterpedia is similary compatible with Kubernetes OpenAPI. You can use kubectl, client-go/discovery, client-go/restmapper or controller-runtime/dynamic-restmapper to access it.\nURL kubectl Use URL to get APIGroupList and APIGroup information\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis\" | jq { \"kind\": \"APIGroupList\", \"apiVersion\": \"v1\", \"groups\": [ { \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } }, { \"name\": \"cert-manager.io\", \"versions\": [ { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } ], \"preferredVersion\": { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } } ] } kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } }  Use kubectl to get api-resources\nkubectl --cluster clusterpedia api-resources # Output: NAME SHORTNAMES APIVERSION NAMESPACED KIND configmaps cm v1 true ConfigMap namespaces ns v1 false Namespace nodes no v1 false Node pods po v1 true Pod secrets v1 true Secret daemonsets ds apps/v1 true DaemonSet deployments deploy apps/v1 true Deployment replicasets rs apps/v1 true ReplicaSet issuers cert-manager.io/v1 true Issuer  ","categories":"","description":"","excerpt":"Clusterpedia has two main components:\n ClusterSynchroManager manages …","ref":"/docs/usage/access-clusterpedia/","tags":"","title":"Access the Clusterpedia"},{"body":"The custom resources differ from kube’s built-in resources in that kube’s built-in resources do not usually change on a regular basis (there are still two cases where the native resource type can change).\nThe custom resource types can be created and deleted dynamically.\nIf you want to automatically adjust the synchronized resource types based on changes in the CRD of the imported cluster, you specify in PediaCluster to synchronize all custom resources.\nspec:syncAllCustomResources:trueThis feature may cause a lot of long connections, so you need to enable Feature Gate in the clustersynchro manager.\n   desc feature gate default     Allow synchronization of all custom resources AllowSyncAllCustomResources true    ","categories":"","description":"","excerpt":"The custom resources differ from kube’s built-in resources in that …","ref":"/docs/features/sync-all-custom-resources/","tags":"","title":"Sync All Custom Resources"},{"body":"自定义资源不同于 kube 的内置资源，kube 的内置资源通常不会经常性变动(依然有两种情况会导致原生资源类型资源改变)， 而自定义资源的类型可能会被动态的创建和删除\n用户如果想要根据被纳管集群中的 CRD 的变动来自动调节同步的资源类型,那么用户在 PediaCluster 中指定同步所有自定义资源。\nspec:syncAllCustomResources:true该功能可能会导致大量的长连接，所以需要在 clustersynchro manager 中开启 Feature Gate\n   作用 feature gate 默认值     允许同步所有的自定义资源 AllowSyncAllCustomResources true    ","categories":"","description":"","excerpt":"自定义资源不同于 kube 的内置资源，kube 的内置资源通常不会经常性变动(依然有两种情况会导致原生资源类型资源改变)， 而自定义资源的 …","ref":"/zh-cn/docs/features/sync_all_custom_resources/","tags":"","title":"同步所有的自定义资源"},{"body":"Clusterpedia 主要有两个组件：\n ClusterSynchroManager 管理 主集群 内的 PediaCluster 资源，通过 PediaCluster 配置认证信息连接到指定集群，并且实时同步相应的资源。 APIServer 同样会监听 主集群 内的 PediaCluster 资源，并根据集群同步的资源以兼容 Kubernetes OpenAPI的方式来提供对资源的复杂检索。  并且 Clusterpedia APIServer 会以聚合式 API 的方式注册到 主集群 的 APIServer 中， 这样我们通过和主集群相同的入口便可访问 Clusterpedia\nResources 和聚合资源 Clusterpedia APIServer 会在 Group —— clusterpedia.io 下提供两种检索资源：\nkubectl api-resources | grep clusterpedia.io # 输出： NAME SHORTNAMES APIVERSION NAMESPACED KIND collectionresources clusterpedia.io/v1beta1 false CollectionResource resources clusterpedia.io/v1beta1 false Resources  Resources 用于指定资源类型的方式来检索，在使用上兼容 Kubernetes OpenAPI CollectionResource 用于检索由多个资源类型聚合而成的新的资源类型，以达到同时检索多种资源的目的   对于 Collection Resource 的概念和使用可以查看 什么是聚合资源（Collection Resource），聚合资源（Collection Resource）检索\n 访问 Clusterpedia 资源 在检索指定类型的资源时，可以按照 Kubernetes OpenAPI 的 Get/List 规范来请求， 这样我们不仅仅可以使用 URL 来访问 Clusterpedia Resources，还可以直接使用 kubectl 或者 client-go 来检索资源。\nClusterpedia 通过 URL Path 来区分请求是多集群资源还是指定集群：\n多集群资源路径 直接以 Resources 资源路径为前缀 /apis/clusterpedia.io/v1beta1/resources\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/version\" 指定集群资源路径 在 Resources 资源路径的基础上设置资源名称来指定集群 /apis/clusterpedia.io/v1beta1/resources/clusters/\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/version\" 无论是多集群资源路径还是指定集群的资源路径，都可以在路径后拼接 Kubernetes 的 Get/List Path\n为 kubectl 生成集群访问的快捷配置 尽管我们可以使用 URL 来访问 Clusterpedia 资源，但是如果想要更方便的使用 kubectl 来查询的话，就需要配置集群的 kubeconfig cluster 配置。\nClusterpedia 提供了一个简单的脚本来帮助生成 cluster kube config\ncurl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.2.0/hack/gen-clusterconfigs.sh | sh - # 输出： Current Context: kubernetes-admin@kubernetes Current Cluster: kubernetes Server: https://10.6.100.10:6443 TLS Server Name: Insecure Skip TLS Verify: Certificate Authority: Certificate Authority Data: *** Cluster \"clusterpedia\" set. Cluster \"cluster-1\" set. Cluster \"cluster-2\" set.  可以在 hack/gen-clusterconfigs.sh 找到该脚本\n 脚本会打印当前的集群信息，并将集群中 PediaCluster 配置到 kubeconfig 中。\ncat ~/.kube/config # .kube/config- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1name:cluster-1- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-2name:cluster-2- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/clusterpedia.io/v1beta1/resourcesname:clusterpedia- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443name:kubernetes脚本生成了用于多集群访问的 clusterpedia cluster 以及其他 PediaCluster Name 命名的 cluster config， 而且在访问 Clusterpedia 时会复用主集群的入口以及认证信息，相比主集群入口只是增加了 Clusterpedia Resources 的 path。\n多集群的 kubeconfig 信息生成完成后，就可以使用 kubectl --cluster 来指定集群访问了\n# 多集群检索时支持的资源 kubectl --cluster clusterpedia api-resources # cluster-1 支持检索的资源 kubectl --cluster cluster-1 api-resources 查看支持检索的资源类型 我们可以根据 URL 路径来分别获取全局资源信息和指定集群的资源信息。\n全局资源信息是所有集群同步的资源类型的并集。\nClusterpedia 开放的 Discovery API 同样兼容 Kubernetes OpenAPI，可以使用 kubectl，client-go/discovery，client-go/restmapper 或者 controller-runtime/dynamic-restmapper 来访问。\nURL kubectl 使用 URL 来获取 APIGroupList 以及 APIGroup 信息\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis\" | jq { \"kind\": \"APIGroupList\", \"apiVersion\": \"v1\", \"groups\": [ { \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } }, { \"name\": \"cert-manager.io\", \"versions\": [ { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } ], \"preferredVersion\": { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } } ] } kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } }  使用 kubectl 来获取 api-resources\nkubectl --cluster clusterpedia api-resources # 输出： NAME SHORTNAMES APIVERSION NAMESPACED KIND configmaps cm v1 true ConfigMap namespaces ns v1 false Namespace nodes no v1 false Node pods po v1 true Pod secrets v1 true Secret daemonsets ds apps/v1 true DaemonSet deployments deploy apps/v1 true Deployment replicasets rs apps/v1 true ReplicaSet issuers cert-manager.io/v1 true Issuer  ","categories":"","description":"","excerpt":"Clusterpedia 主要有两个组件：\n ClusterSynchroManager 管理 主集群 内的 PediaCluster 资 …","ref":"/zh-cn/docs/usage/access-clusterpedia/","tags":"","title":"访问 Clusterpedia"},{"body":"You can synchronize all types of resources with the All-resource Wildcard, and any resource type change in the imported cluster (e.g. kube version upgrade, group/version disabled, CRD or APIService change) will cause the synchronized resource type to be modified.\nspec:syncResources:- group:\"*\"resources:- \"*\"Please use this feature with caution, it will create a lot of long connections, in the future Clusterpedia will add the Agent feature to avoid the creation of long connections\nIt is recommended to specify specific resource types, if you need to dynamically synchronize custom resources, you can use Sync all custom resources.\nTo use All-resources Wildcard you need to enable Feature Gate in clustersynchro manager.\n   desc feature gate default     Allow synchronization of all resources AllowSyncAllCustomResources true    ","categories":"","description":"","excerpt":"You can synchronize all types of resources with the All-resource …","ref":"/docs/features/sync-all-resources/","tags":"","title":"Sync All Resources"},{"body":"用户可以通过 全资源通配符 来同步所有类型的资源，当被纳管集群中发生任意的资源类型变动(例如 kube 版本升级，group/version 被禁用，CRD 或者 APIService 变动)都会导致同步的资源类型发生修改。\nspec:syncResources:- group:\"*\"resources:- \"*\"请谨慎使用该功能，该功能会创建大量的长连接，未来 Clusterpedia 添加 Agent 功能后，可以避免长连接的创建\n建议指定具体的资源类型，如果需要对自定义资源进行动态同步，可以使用 同步所有的自定义资源\n使用全资源通配符 需要在 clustersynchro manager 中开启 Feature Gate\n   作用 feature gate 默认值     允许同步所有的自定义资源 AllowSyncAllCustomResources true    ","categories":"","description":"","excerpt":"用户可以通过 全资源通配符 来同步所有类型的资源，当被纳管集群中发生任意的资源类型变动(例如 kube 版本升级，group/version …","ref":"/zh-cn/docs/features/sync_all_resources/","tags":"","title":"同步所有的资源"},{"body":"In order to query multiple types of resources at once, Clusterpedia provides a new resource: Collection Resource.\nCollection Resource is composed of different types of resources, and these resources can be retrieved and paged in a uniform way through the Collection Resource.\nWhat Collection Resources are supported by the Clusterpedia depends on the Storage Layer. For example, the Default Storage Layer temporarily supports the workloads and kuberesources.\nkubectl get collectionresources # Output: NAME RESOURCES workloads deployments.apps,daemonsets.apps,statefulsets.apps kuberesources *,*.admission.k8s.io,*.admissionregistration.k8s.io,*.apiextensions.k8s.io,*.apps,*.authentication.k8s.io,*.authorization.k8s.io,*.autoscaling,*.batch,*.certificates.k8s.io,*.coordination.k8s.io,*.discovery.k8s.io,*.events.k8s.io,*.extensions,*.flowcontrol.apiserver.k8s.io,*.imagepolicy.k8s.io,*.internal.apiserver.k8s.io,*.networking.k8s.io,*.node.k8s.io,*.policy,*.rbac.authorization.k8s.io,*.scheduling.k8s.io,*.storage.k8s.io kuberesources contains all of kube’s built-in resources, and we can use kuberesources to filter and search all of theme in a uniform api.\nView the supported Collection Resource in a yaml file\nkubectl get collectionresources -o yaml # Output:apiVersion:v1items:- apiVersion:clusterpedia.io/v1beta1kind:CollectionResourcemetadata:creationTimestamp:nullname:workloadsresourceTypes:- group:appsresource:deploymentsversion:v1- group:appsresource:daemonsetsversion:v1- group:appsresource:statefulsetsversion:v1- apiVersion:clusterpedia.io/v1beta1kind:CollectionResourcemetadata:creationTimestamp:nullname:kuberesourcesresourceTypes:- group:\"\"- group:admission.k8s.io- group:admissionregistration.k8s.io- group:apiextensions.k8s.io- group:apps- group:authentication.k8s.io- group:authorization.k8s.io- group:autoscaling- group:batch- group:certificates.k8s.io- group:coordination.k8s.io- group:discovery.k8s.io- group:events.k8s.io- group:extensions- group:flowcontrol.apiserver.k8s.io- group:imagepolicy.k8s.io- group:internal.apiserver.k8s.io- group:networking.k8s.io- group:node.k8s.io- group:policy- group:rbac.authorization.k8s.io- group:scheduling.k8s.io- group:storage.k8s.iokind:Listmetadata:resourceVersion:\"\"selfLink:\"\"It is found that workloads includes three resources: deployments, daemonsets, and statefulsets.\nAnd kuberesources contains all of kube’s built-in resources.\nFor details about Collection Resource, see Search for Collection Resource\nCustom Collection Resource Default Storage Layer will support Custom Collection Resource in future to enable users to combine any resource types freely.\n","categories":"","description":"","excerpt":"In order to query multiple types of resources at once, Clusterpedia …","ref":"/docs/concepts/collection-resource/","tags":"","title":"Collection Resource"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/installation/","tags":"","title":"Installation"},{"body":"Install The installation of Clusterpedia is divided into several parts:\n Install storage component Install Clusterpedia Final check   If you use existing storage component (MySQL or PostgreSQL), directly skip the step of installing the storage component.\n Pull clusterpedia project:\ngit clone https://github.com/clusterpedia-io/clusterpedia.git cd clusterpedia git checkout v0.3.0 Install storage component Clusterpedia installation provides two storage components (MySQL 8.0 and PostgreSQL 12) to choose.\n If you use existing storage components (MySQL or PostgreSQL), directly skip this step\n PostgreSQL MySQL Go to the installation directory of the selected storage component\ncd ./deploy/internalstorage/postgres  Go to the installation directory of the selected storage component\ncd ./deploy/internalstorage/mysql  The storage component uses the Local PV method to store data, and you shall specify the node where the Local PV is located during deployment\n You can choose to provide your own PV\n export STORAGE_NODE_NAME=\u003cnodename\u003e sed \"s|__NODE_NAME__|$STORAGE_NODE_NAME|g\" `grep __NODE_NAME__ -rl ./templates` \u003e clusterpedia_internalstorage_pv.yaml Deploy storage component\nkubectl create -f . # Go back to Clusterpedia root directory cd ../../../ Install Clusterpedia Once the storage component are successfully deployed, you can install the Clusterpedia.\nIf you uses existing storage component, refer to Configure Storage Layer to set the storage component into Default Storage Layer\n Run the following cmd in the clusterpedia root directory\n # Deploy Clusterpedia CRD and components kubectl apply -f ./deploy Final check Check if the component Pods are running properly\nkubectl -n clusterpedia-system get pods Uninstall Clean up PediaCluster Before uninstalling Clusterpedia, you need to check if PediaCluster resources still exist in your environment, and clean up those resources.\nkubectl get pediacluster Uninstall Clusterpedia After the PediaCluster resource cleanup is complete, uninstall the Clusterpedia components.\nkubectl delete -f ./deploy/clusterpedia_apiserver_apiservice.yaml kubectl delete -f ./deploy/clusterpedia_apiserver_deployment.yaml kubectl delete -f ./deploy/clusterpedia_clustersynchro_manager_deployment.yaml kubectl delete -f ./deploy/clusterpedia_apiserver_rbac.yaml kubectl delete -f ./deploy/cluster.clusterpedia.io_pediaclusers.yaml Uninstall Storage Component Remove related resources depending on the type of storage component selected.\nkubectl delete -f ./deploy/internalstorage/\u003cstorage type\u003e remove Local PV and clean up data After the storage component is uninstalled, the Local PV and corresponding data will still be left in the node and we need to clean it manually.\nView the mounted nodes via Local PV resource details.\nkubectl get pv clusterpedia-internalstorage-\u003cstorage type\u003e Once you know the node where the data is stored, you can delete the Local PV.\nkubectl delete pv clusterpedia-internalstorage-\u003cstorage type\u003e Log in to the node where the data is located and clean up the data\n# In the node where the legacy data is located rm /var/local/clusterpedia/internalstorage/\u003cstorage type\u003e ","categories":"","description":"","excerpt":"Install The installation of Clusterpedia is divided into several …","ref":"/docs/installation/kubectl-apply/","tags":"","title":"kubectl apply"},{"body":"Multi-cluster resource search allows us to filter resources in multiple clusters at once based on query criteria, and provides the ability to paginate and sort these resources.\nWhen using kubectl, we can see what resources are currently available for search\nkubectl --cluster clusterpedia api-resources # Output： NAME SHORTNAMES APIVERSION NAMESPACED KIND configmaps cm v1 true ConfigMap namespaces ns v1 false Namespace nodes no v1 false Node pods po v1 true Pod secrets v1 true Secret daemonsets ds apps/v1 true DaemonSet deployments deploy apps/v1 true Deployment replicasets rs apps/v1 true ReplicaSet issuers cert-manager.io/v1 true Issuer Clusterpedia provides multi-cluster resource search based on all cluster-synchronized resources, and we can view Sync Cluster Resources to update the resources that need to be synchronized.\nBasic Features Specify Clusters When searching multiple clusters, all clusters will be retrieved by default, we can also specify a single cluster or a group of clusters\nkubectl URL Use Search Label search.clusterpedia.io/clusters to specify a group of clusters.\nkubectl --cluster clusterpedia get deployments -l \"search.clusterpedia.io/clusters in (cluster-1,cluster-2)\" # Output： NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 coredns 2/2 2 2 64d For specifying a single cluster search, we can also use Search Label to set it up, or see Search in Specified Cluster to specify a cluster using URL Path.\n# specifying a single cluster kubectl --cluster clusterpedia get deployments -l \"search.clusterpedia.io/clusters=cluster-1\" # specifying a cluster can also be done with --cluster \u003ccluster name\u003e kubectl --cluster cluster-1 get deployments  When using URL, use clusters as URL Query to pass.\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?clusters=cluster-1\" If we specify a single cluster, we can also put the cluster name in the URL Path.\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/apis/apps/v1/deployments\" Lean More Specify Cluster Search\n Specify Namespaces We can specify a single namespace or all namespaces as if we were viewing a native Kubernetes resource.\nkubectl URL Use -n \u003cnamespace\u003e to specify the namespace, the default is in the default namespace\nkubectl --cluster clusterpedia get deployments -n kube-system # Output： CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE cluster-1 coredns 2/2 2 2 68d cluster-2 calico-kube-controllers 1/1 1 1 64d cluster-2 coredns 2/2 2 2 64d Use -A or --all-namespaces to see the resources under all namespaces for all clusters\nkubectl --cluster clusterpedia get deployments -A # Output： NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 calico-kube-controllers 1/1 1 1 64d kube-system cluster-2 coredns 2/2 2 2 64d default cluster-2 dd-airflow-scheduler 0/1 1 0 54d default cluster-2 dd-airflow-web 0/1 1 0 54d  The URL Path to get the resources is the same as the native Kubernetes /apis/apps/v1/deployments.\nWe just need to prefix the path to Clusterpedia Resources with /apis/clusterpedia.io/v1beta1/resources to indicate that it is currently a Clusterpedia request.\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments\" # Specify namespace kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/namespaces/kube-system/deployments\"   In addition to specifying a single namespace, we can also specify to search the resources under a group of namespaces. kubectl URL Use Search Label search.clusterpedia.io/namespaces to specify a group of namespaces.\n Be sure to specify the -A flag to avoid kubectl setting default namespace in the path.\n kubectl --cluster clusterpedia get deployments -A -l \"search.clusterpedia.io/namespaces in (kube-system, default)\" # Output： NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 calico-kube-controllers 1/1 1 1 64d kube-system cluster-2 coredns 2/2 2 2 64d default cluster-2 dd-airflow-scheduler 0/1 1 0 54d default cluster-2 dd-airflow-web 0/1 1 0 54d  When using URL, we don’t need to use Label Selector to pass parameters, just use URL Query - namespaces\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?namespaces=kube-system,default\"  Specify Resource Names Users can filter resources by a group of resource names\nkubectl URL Use Search Label search.clusterpedia.io/names to specify a group of resource names.\n Note: To search for resources under all namespaces, specify the -A flag, or use -n to specify the namespace.\n kubectl --cluster clusterpedia get deployments -A -l \"search.clusterpedia.io/names=coredns\" # Output: NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 coredns 2/2 2 2 64d  When using URL, use names to pass as URL Query, and if you need to specify namespaces, then add namespace to the path.\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?names=kube-coredns,dd-airflow-web\" # search resources with specified names under default namespace kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/namespaces/default/deployments?names=kube-coredns,dd-airflow-web\" When searching from multiple clusters, the data returned is actually encapsulated in a structure similar to DeploymentList.\nIf we want to get a single Deployment then we need to specify the cluster name in the URL path, refer to Get Single Resource\n Creation Time Interval The creation time interval used for the search is left closed and right open, since \u003c= creation time \u003c before.\nFor more details on the time interval parameters, see Search by Creation Time Interval\nkubectl URL Use Search Label - search.clusterpedia.io/since and search.clusterpedia.io/before to specify the time interval respectively.\nkubectl --cluster clusterpedia get deployments -A -l \"search.clusterpedia.io/since=2022-03-24, \\ search.clusterpedia.io/before=2022-04-10\"  When using URLs, you can use Query - since and before to specify the time interval respectively.\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?since=2022-03-24\u0026before=2022-04-10\"  Fuzzy Search Currently supports fuzzy search based on resource names.\nSince fuzzy search needs to be discussed further, it is temporarily provided as an experimental feature.\nOnly the Search Label method is supported, URL Query isn’t supported.\nkubectl --cluster clusterpedia get deployments -A -l \"internalstorage.clusterpedia.io/fuzzy-name=test\" Filters out deployments whose names contain the test string.\nYou can use the in operator to pass multiple fuzzy arguments, so that you can filter out resources that have all strings in their names.\nField Selector Native Kubernetes currently only supports field filtering on metadata.name and metadata.namespace, and the operators only support =, !=, ==`, which is very limited.\nClusterpedia provides more powerful features based on the compatibility with existing Field Selector features, and supports the same operators as Label Selector.\nField Selector’s key currently supports three formats.\n Use . to sperate fields  kubectl --cluster clusterpedia get pods --field-selector=\"status.phase=Running\" # we can also add the first character `.` kubectl --cluster clusterpedia get pods --field-selector=\".status.phase notin (Running,Succeeded)\"  Field names wrapped in '' or \"\" can be used for fields with illegal characters like .  kubectl --cluster clusterpedia get deploy \\  --field-selector=\"metadata.annotations['test.io'] in (value1,value2),spec.replica=3\"  Use [] to separate fields, the string inside [] must be wrapped with '' or \"\"  kubectl --cluster clusterpedia get pods --field-selector=\"status['phase']!=Running\" Support List Fields The actual design of field filtering takes into account the filtering of fields within list elements, but more discussion is needed as to whether the usage scenario actually makes sense: issue: support list field filtering\nExamples：\nkubectl get po --field-selector=\"spec.containers[].name!=container1\" kubectl get po --field-selector=\"spec.containers[].name == container1\" kubectl get po --field-selector=\"spec.containers[1].name in (container1,container2)\" Search by Parent or Ancestor Owner Searching by Owner is a very useful search function, and Clusterpedia also supports the seniority advancement of Owner to search for grandparents and even higher seniority.\nBy searching by Owner, we can query all Pods under Deployment at once, without having to query ReplicaSet in between.\nWhen using the Owner query, we must specify a single cluster, either as a Serach Label or URL Query, or you can specify the cluster name in the URL Path.\nFor details on how to search by Owner, you can refer to Search by Parent or Ancestor Owenr within a specified cluster\nPaging and Sorting Paging and sorting are essential features for resource retrieval.\nSorting by multiple fields Multiple fields can be specified for sorting, and the support for sorting fields is determined by the Storage Layer.\nThe current Default Storage Layer supports sorting cluster，namespace，name，created_at，resource_version in both asc and desc, and the fields are also supported in any combination kubectl URL Sorting using multiple fields\nkubectl --cluster clusterpedia get pods -l \\  \"search.clusterpedia.io/orderby in (cluster, name)\" Because of Label Selector’s validation of value, order by desc requires _desc at the end of the field.\nkubectl --cluster clusterpedia get pods -l \\  \"search.clusterpedia.io/orderby in (namespace_desc, cluster, name)\"  Use URL Query to specify sorting fields\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?orderby=namespace,cluster\" When specifying a field in order by desc, add desc to the end of the field, separated by spaces\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?orderby=namespace desc,cluster\"  Paging Native Kubernetes actually supports paging, and fields for paging queries already exist in ListOptions.\nClusterpedia reuses the ListOptions.Limit and ListOptions.Continue fields as the size and offset for paging.\nkubectl URL kubectl --chunk-size is actually used for paging pulls by setting ListOptions.Limit.\nThe native Kubernetes APIServer carries the continue for the next list in the returned response, and performs the next list based on --chunk-size and conintue until the conintue is empty in the response data.\nClusterpedia does not return the continue field in the response by default in order to ensure paged search in kubectl, which prevents kubectl from pulling all data using chunks.\nkubectl --cluster cluster-1 get pods --chunk-size 10 Note that kubectl sets the limit to the default value of 500 without setting --chunk-size, which means that search.clusterpedia.io/size does not actually take effect and is only used to correspond to search.clusterpedia.io/offset.\n URL Query has a higher priority than Search Label\n There is no flag to set for continue in kubectl. So you have to use Search Label to pass it.\nkubectl --cluster clusterpedia get pods --chunk-size 10 -l \\  \"search.clusterpedia.io/offset=10\"  To paginate resources, just set the limit and continue in the URL.\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?limit=10\u0026continue=5\"  Response With Continue ListMeta.Continue can be used in ListOptions.Continue as the offset for the next request.\nAs mentioned in the paging feature, Clusterepdia does not have continue in the response to prevent kubectl from pulling the full amount of data in pieces.\nHowever, if the user requires it, he can request that the response include continue. URL kubectl When accessing Clusterepdia using a URL, the response' continue can be used as the offset for the next request.\n Use with paging\n kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?withContinue=true\u0026limit=1\" | jq { \"kind\": \"DeploymentList\", \"apiVersion\": \"apps/v1\", \"metadata\": { \"continue\": \"1\" }, \"items\": [ ... ] }  Setting search.clusterpedia.io/with-continue in kubectl will result in pulling the full amount of resources as a paged pull.\nkubectl --cluster clusterpedia get deploy -l \\  \"search.clusterpedia.io/with-continue=true\"  Response With Remaining Count In some UI cases, it is often necessary to get the total number of resources in the current search condition.\nThe RemainingItemCount field exists in the ListMeta of the Kubernetes List response.\nBy reusing this field, the total number of resources can be returned in a Kubernetes OpenAPI-compatible manner:\noffset + len(list.items) + list.metadata.remainingItemCount\n When offset is too large, remainingItemCount may be negative, ensuring that the total number of resources can always be calculated.\n URL kubectl Set withRemainingCount in the URL Query to request that the response include the number of remaining resources.\n Use with paging\n kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?withRemainingCount\u0026limit=1\" | jq { \"kind\": \"DeploymentList\", \"apiVersion\": \"apps/v1\", \"metadata\": { \"remainingItemCount\": 23 }, \"items\": [ ... ] }  Need to use this feature as a URL\n ","categories":"","description":"","excerpt":"Multi-cluster resource search allows us to filter resources in …","ref":"/docs/usage/search/multi-cluster/","tags":"","title":"Multiple Clusters"},{"body":"安装 Clusterpedia 的安装分为两个部分：\n 安装存储组件 安装 Clusterpedia   用户如果使用已有的存储组件（MySQL 或者 PostgreSQL），则直接跳过安装存储组件\n 拉取项目：\ngit clone https://github.com/clusterpedia-io/clusterpedia.git cd clusterpedia git checkout v0.3.0 安装存储组件 Clusterpedia 安装时提供了 MySQL 8.0 和 PostgreSQL 12 两种存储组件以供选择\n 用户如果使用已有的存储组件（MySQL 或者 PostgreSQL），则直接跳过存储组件安装\n PostgreSQL MySQL 进入所选存储组件的安装目录\ncd ./deploy/internalstorage/postgres  进入所选存储组件的安装目录\ncd ./deploy/internalstorage/mysql  存储组件使用 Local PV 的方式存储数据，部署时需要指定 Local PV 所在节点\n 用户可以选择自己提供 PV\n export STORAGE_NODE_NAME=\u003c节点名称\u003e sed \"s|__NODE_NAME__|$STORAGE_NODE_NAME|g\" `grep __NODE_NAME__ -rl ./templates` \u003e clusterpedia_internalstorage_pv.yaml 部署存储组件\nkubectl create -f . # 跳回 Clusterpedia 项目根目录 cd ../../../ 安装 Clusterpedia 存储组件部署完成后，便可安装 Clusterpedia。\n如果选择使用已存在的存储组件，则需要参考 配置存储层 来将存储组件对接到默认存储层中\n 在 clusterpedia 项目根目录下进行操作\n # 部署 Clusterpedia CRD 与组件 kubectl apply -f ./deploy 安装完成 检查组件 Pods 运行是否正常\nkubectl -n clusterpedia-system get pods 卸载 清理 PediaCluster 在卸载 Clusterpedia 前，需要查看环境中是否还存在 PediaCluster 资源，如果存在那么需要删除这些资源\nkubectl get pediacluster 卸载 Clusterpedia PediaCluster 资源清理完成后，卸载 Clusterpedia 相关组件。\nkubectl delete -f ./deploy/clusterpedia_apiserver_apiservice.yaml kubectl delete -f ./deploy/clusterpedia_apiserver_deployment.yaml kubectl delete -f ./deploy/clusterpedia_clustersynchro_manager_deployment.yaml kubectl delete -f ./deploy/clusterpedia_apiserver_rbac.yaml kubectl delete -f ./deploy/cluster.clusterpedia.io_pediaclusers.yaml 卸载存储组件 根据选择的存储组件类型，来移除相关的资源\nkubectl delete -f ./deploy/internalstorage/\u003cstorage type\u003e 清理 Local PV 以及数据 存储组件卸载后，PV 和相应的数据会依然遗留在节点中，我们需要手动清理\n通过 Local PV 资源详情，来查看挂载的节点\nkubectl get pv clusterpedia-internalstorage-\u003cstorage type\u003e 得知数据保存的节点后，删除 Local PV\nkubectl delete pv clusterpedia-internalstorage-\u003cstorage type\u003e 登录数据所在节点，清理数据\n# 遗留数据所在节点 rm /var/local/clusterpedia/internalstorage/\u003cstorage type\u003e ","categories":"","description":"","excerpt":"安装 Clusterpedia 的安装分为两个部分：\n 安装存储组件 安装 Clusterpedia   用户如果使用已有的存储组 …","ref":"/zh-cn/docs/installation/kubectl-apply/","tags":"","title":"使用 kubectl apply"},{"body":"多集群资源检索可以满足我们根据查询条件一次过滤多个集群内的资源，并提供对这些资源的分页排序的能力\n在使用 kubectl 操作时，可以查看一下当前可以检索哪些资源\nkubectl --cluster clusterpedia api-resources # 输出： NAME SHORTNAMES APIVERSION NAMESPACED KIND configmaps cm v1 true ConfigMap namespaces ns v1 false Namespace nodes no v1 false Node pods po v1 true Pod secrets v1 true Secret daemonsets ds apps/v1 true DaemonSet deployments deploy apps/v1 true Deployment replicasets rs apps/v1 true ReplicaSet issuers cert-manager.io/v1 true Issuer Clusterpedia 根据所有集群同步的资源来提供多集群的资源检索，可以查看 同步集群资源 来更新需要同步的资源\n基本功能 指定集群 多集群检索时，会默认检索所有的集群，我们也可以指定单个或者一组集群\nkubectl URL 使用 Search Label search.clusterpedia.io/clusters 来指定一组集群\nkubectl --cluster clusterpedia get deployments -l \"search.clusterpedia.io/clusters in (cluster-1,cluster-2)\" # 输出： NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 coredns 2/2 2 2 64d 对于指定单个集群的检索，同样可以使用 Search Label 来设置，也可以查看 指定集群检索 来使用 URL Path 的方式指定集群\n# 指定单个集群 kubectl --cluster clusterpedia get deployments -l \"search.clusterpedia.io/clusters=cluster-1\" # 指定集群也可以使用 --cluster \u003ccluster name\u003e 来指定 kubectl --cluster cluster-1 get deployments  使用 URL 时，使用 clusters 作为 URL Query 来传递\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?clusters=cluster-1\" 如果指定单个集群，也可以将 cluster name 放到 URL 路径中\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/apis/apps/v1/deployments\" 了解更多指定集群检索\n 指定命名空间 可以像查看原生 Kube 一样来指定单个命名空间或者所有命名空间\nkubectl URL 使用 -n \u003cnamespace\u003e 来指定命名空间，默认在 default 命名空间\nkubectl --cluster clusterpedia get deployments -n kube-system # 输出： CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE cluster-1 coredns 2/2 2 2 68d cluster-2 calico-kube-controllers 1/1 1 1 64d cluster-2 coredns 2/2 2 2 64d 使用 -A 或者 --all-namespaces 来查看所有集群的所有命名空间下的资源\nkubectl --cluster clusterpedia get deployments -A # 输出： NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 calico-kube-controllers 1/1 1 1 64d kube-system cluster-2 coredns 2/2 2 2 64d default cluster-2 dd-airflow-scheduler 0/1 1 0 54d default cluster-2 dd-airflow-web 0/1 1 0 54d  获取资源的 URL Path 和原生 Kubernetes 一样 /apis/apps/v1/deployments，\n只是需要加上 Clusterpedia Resources 的路径前缀 /apis/clusterpedia.io/v1beta1/resources 来表示当前是 Clusterpedia 请求。\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments\" # 指定命名空间 kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/namespaces/kube-system/deployments\"   除了指定单个命名空间，还可以指定查看一组命名空间下的资源 kubectl URL 使用 Search Label search.clusterpedia.io/namespaces 来指定一组命名空间\n 一定要指定 -A 参数，避免 kubectl 在路径中设置 default namespace\n kubectl --cluster clusterpedia get deployments -A -l \"search.clusterpedia.io/namespaces in (kube-system, default)\" # 输出： NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 calico-kube-controllers 1/1 1 1 64d kube-system cluster-2 coredns 2/2 2 2 64d default cluster-2 dd-airflow-scheduler 0/1 1 0 54d default cluster-2 dd-airflow-web 0/1 1 0 54d  使用 URL 时，就不需要使用 Label Selector 来传递参数了，直接使用 URL Query namespaces 即可\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?namespaces=kube-system,default\"  指定资源名称 用户可以通过一组资源名称来过滤资源\nkubectl URL 使用 Search Label search.clusterpedia.io/names 来指定一组资源名称 注意：如果在所有命名空间下检索资源，需要指定 -A 参数，或者使用 -n 来指定命名空间\nkubectl --cluster clusterpedia get deployments -A -l \"search.clusterpedia.io/names=coredns\" # 输出： NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 coredns 2/2 2 2 64d  使用 URL 时，使用 names 作为 URL Query 来传递，如果需要指定命名空间，那么就在路径中加上 namespace。\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?names=kube-coredns,dd-airflow-web\" # 在 default 命名空间下检索指定名字的资源 kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/namespaces/default/deployments?names=kube-coredns,dd-airflow-web\" 在多集群检索时，返回的数据实际是以类似 DeploymentList 的结构封装的数据。\n如果我们想要获取到单个的 Deployment 那么就需要在 URL 路径中指定 cluster name，参考获取单个资源\n 创建时间的区间 创建时间的区间以左闭右开的方式来进行检索，since \u003c= creation time \u003c before\n关于详细的时间区间参数可以查看 创建时间区间检索\nkubectl URL 使用 Search Label search.clusterpedia.io/since 和 search.clusterpedia.io/before 来指定时间区间\nkubectl --cluster clusterpedia get deployments -A -l \"search.clusterpedia.io/since=2022-03-24, \\ search.clusterpedia.io/before=2022-04-10\"  直接使用 URL 时，可以 Query since 和 before 来分别指定时间的区间\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?since=2022-03-24\u0026before=2022-04-10\"  模糊搜索 当前支持根据资源名称进行模糊搜索，由于模糊搜索还需要继续讨论，所以暂时以试验性功能来提供\n只支持 Search Label 的方式，不支持 URL Query\nkubectl --cluster clusterpedia get deployments -A -l \"internalstorage.clusterpedia.io/fuzzy-name=test\" 过滤出名字中包含 test 字符串的 deployments。\n可以使用 in 操作符来传递多个参数，这样可以过滤出名字中包含所有字符串的资源\n字段过滤 原生 Kubernetes 当前只支持对 metadata.name 和 metadata.namespace 的字段过滤，而且操作符只支持 =，!=，==，能力非常有限。\nClusterpedia 在兼容已有的 Field Selector 功能的基础上，提供了更加强大的功能，支持和 Label Selector 相同的操作符。\nField Selector 的 key 当前支持三种格式：\n 使用 . 分隔字段  kubectl --cluster clusterpedia get pods --field-selector=\"status.phase=Running\" # 也可以在首字符添加 `.` kubectl --cluster clusterpedia get pods --field-selector=\".status.phase notin (Running,Succeeded)\"  字段名称使用 '' 或者 \"\" 来包裹，可以用于带 . 之类的非法字符的字段  kubectl --cluster clusterpedia get deploy \\  --field-selector=\"metadata.annotations['test.io'] in (value1,value2),spec.replica=3\"  使用 [] 来分隔字段，[] 内字符串必须使用 '' 或者 \"\" 来包裹  kubectl --cluster clusterpedia get pods --field-selector=\"status['phase']!=Running\" 列表字段支持 实际在字段过滤的设计时考虑到了对列表元素内字段过滤，不过由于使用场景是否真正有意义还需要更多的讨论 issue: support list field filtering\n示例：\nkubectl get po --field-selector=\"spec.containers[].name!=container1\" kubectl get po --field-selector=\"spec.containers[].name == container1\" kubectl get po --field-selector=\"spec.containers[1].name in (container1,container2)\" 根据父辈以及祖辈 Owner 查询 通过 Owner 检索是一个非常有用的检索功能， 并且 Clusterpedia 在 Owner 的基础上还支持对 Owner 进行辈分提升来进行祖辈甚至更高辈分的检索。\n通过 Owner 检索，可以一次查询到 Deployment 下的所有 Pods，无需中间再查询 ReplicaSet。\nOwner 查询必须指定单个集群，可以使用 Serach Label 或者 URL Query 来指定，也可以在 URL Path 中指定集群名称\n关于根据 Owner 检索的具体使用方法，可以参考指定集群内根据父辈或者祖辈 Owenr 进行检索\n分页与排序 分页和排序是资源检索必不可少的功能\n根据多个字段进行排序 可以指定多个字段进行排序，而对排序字段的支持是由存储层来决定。\n当前默认存储层支持对 cluster，namespace，name，created_at，resource_version 进行正序和倒序的排序，字段也支持随意的组合 kubectl URL 使用多个字段进行正序排序\nkubectl --cluster clusterpedia get pods -l \\  \"search.clusterpedia.io/orderby in (cluster, name)\" 由于 Label Selector 对 value 的限制，倒序时需要在字段结尾加上 _desc\nkubectl --cluster clusterpedia get pods -l \\  \"search.clusterpedia.io/orderby in (namespace_desc, cluster, name)\"  使用 URL Query 来指定排序字段\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?orderby=namespace,cluster\" 指定倒序字段时，在字段后添加 desc，以空格分隔\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?orderby=namespace desc,cluster\"  分页 原生 Kubernetes 实际是支持分页的，ListOptions 中便已经存在用于分页查询的字段。\nClusterpedia 复用 ListOptions.Limit 和 ListOptions.Continue 字段作为分页的 size 和 offset。\nkubectl URL kubectl 的 --chunk-size 实际通过设置 limit 来用于分片拉取。\n原生的 Kubernetes APIServer 会在返回的响应中携带用于下一次拉取的 continue， 并根据 --chunk-size 和 conintue 进行下一次拉取，直到相应的数据中 Conintue 为空。\nClusterpedia 为了保证在 kubectl 中实现分页检索，默认并不会在响应中返回 continue 字段，这样避免了 kubectl 使用分片拉取全部数据\nkubectl --cluster cluster-1 get pods --chunk-size 10 需要注意 kubectl 在不设置 --chunk-size 的情况下，limit 会被设置成默认值 500， 也就是说 search.clusterpedia.io/size 实际是无法生效的，只是用于和 search.clusterpedia.io/offset 形成对应关系\n URL Query 的优先级大于 Search Label\n 在 kubectl 中 continue 是没有 flag 可以设置的。所以还是要使用 Search Label 来传递。\nkubectl --cluster clusterpedia get pods --chunk-size 10 -l \\  \"search.clusterpedia.io/offset=10\"  对资源进行分页检索，只需要在 URL 中设置 limit 和 continue 即可\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?limit=10\u0026continue=5\"  响应携带 Continue 信息 响应数据的 ListMeta.Continue 可以用于 ListOptions.Continue 中作为下一次拉取的 offset\n分页功能中我们提到，为了避免 kubectl 进行对全量数据的分片拉取，Clusterepdia 不会在响应中携带 Continue 信息。\n不过如果用户有需求那么可以要求响应中携带 Continue 信息 URL kubectl 在使用 URL 访问 Clusterepdia 时，响应的 Continue 可以作为下一次请求的 offset\n 搭配分页功能使用\n kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?withContinue=true\u0026limit=1\" | jq { \"kind\": \"DeploymentList\", \"apiVersion\": \"apps/v1\", \"metadata\": { \"continue\": \"1\" }, \"items\": [ ... ] }  在 kubectl 设置 search.clusterpedia.io/with-continue 会导致以分片拉取的形式拉取全量资源。\nkubectl --cluster clusterpedia get deploy -l \\  \"search.clusterpedia.io/with-continue=true\"  响应携带剩余资源数量信息 在一些 UI 场景下，往往会需要获取到当前检索条件下的资源总量。\nKubernetes List 响应的 ListMeta 中存在 RemainingItemCount 字段，\n通过复用该字段，便可在兼容 Kubernetes OpenAPI 的基础下计算出资源总量：\noffset + len(list.items) + list.metadata.remainingItemCount\n 在 offset 过大时，remainingItemCount 可能为负数，保证总是可以计算出资源总量\n URL kubectl 在 URL Query 设置 withRemainingCount 即可要求响应携带剩余资源数量\n 搭配分页功能使用\n kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?withRemainingCount\u0026limit=1\" | jq { \"kind\": \"DeploymentList\", \"apiVersion\": \"apps/v1\", \"metadata\": { \"remainingItemCount\": 23 }, \"items\": [ ... ] }  需要以 URL 的方式使用该功能\n ","categories":"","description":"","excerpt":"多集群资源检索可以满足我们根据查询条件一次过滤多个集群内的资源，并提供对这些资源的分页排序的能力\n在使用 kubectl 操作时，可以查看一 …","ref":"/zh-cn/docs/usage/search/multi-cluster/","tags":"","title":"多集群检索"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/installation/","tags":"","title":"安装"},{"body":"Clusterpedia 为了能够一次性获取多个类型的资源，在单个资源类型的基础上提供了一种新的资源 —— 聚合资源（Collection Resource）。\n聚合资源是由不同的资源类型组合而成，可以对这些资源类型进行统一的检索和分页。\n具体支持哪些聚合资源是由存储层来决定的，例如 默认存储层 支持 workloads 和 kuberesources 两种聚合资源。\nkubectl get collectionresources # 输出: NAME RESOURCES workloads deployments.apps,daemonsets.apps,statefulsets.apps kuberesources *,*.admission.k8s.io,*.admissionregistration.k8s.io,*.apiextensions.k8s.io,*.apps,*.authentication.k8s.io,*.authorization.k8s.io,*.autoscaling,*.batch,*.certificates.k8s.io,*.coordination.k8s.io,*.discovery.k8s.io,*.events.k8s.io,*.extensions,*.flowcontrol.apiserver.k8s.io,*.imagepolicy.k8s.io,*.internal.apiserver.k8s.io,*.networking.k8s.io,*.node.k8s.io,*.policy,*.rbac.authorization.k8s.io,*.scheduling.k8s.io,*.storage.k8s.io kuberesources 包含了所有 kube 的内置资源，我们可以通过 kuberesources 来对所有的内置资源进行统一的过滤和检索。\n以 yaml 形式查看支持的聚合资源\nkubectl get collectionresources -o yaml # 输出：apiVersion:v1items:- apiVersion:clusterpedia.io/v1beta1kind:CollectionResourcemetadata:creationTimestamp:nullname:workloadsresourceTypes:- group:appsresource:deploymentsversion:v1- group:appsresource:daemonsetsversion:v1- group:appsresource:statefulsetsversion:v1- apiVersion:clusterpedia.io/v1beta1kind:CollectionResourcemetadata:creationTimestamp:nullname:kuberesourcesresourceTypes:- group:\"\"- group:admission.k8s.io- group:admissionregistration.k8s.io- group:apiextensions.k8s.io- group:apps- group:authentication.k8s.io- group:authorization.k8s.io- group:autoscaling- group:batch- group:certificates.k8s.io- group:coordination.k8s.io- group:discovery.k8s.io- group:events.k8s.io- group:extensions- group:flowcontrol.apiserver.k8s.io- group:imagepolicy.k8s.io- group:internal.apiserver.k8s.io- group:networking.k8s.io- group:node.k8s.io- group:policy- group:rbac.authorization.k8s.io- group:scheduling.k8s.io- group:storage.k8s.iokind:Listmetadata:resourceVersion:\"\"selfLink:\"\"可以看到 workloads 包含了 deployments，daemonsets， statefulsets 三种资源。\n而 kuberesources 则包含了 kube 内置的所有资源。\n更多关于聚合资源的操作可以查看 聚合资源检索\n自定义聚合资源 内置存储层未来会支持自定义聚合资源，允许用户随意组合任意的资源类型。\n","categories":"","description":"","excerpt":"Clusterpedia 为了能够一次性获取多个类型的资源，在单个资源类型的基础上提供了一种新的资源 —— 聚合资源（Collection …","ref":"/zh-cn/docs/concepts/collection-resource/","tags":"","title":"聚合资源(Collection Resource)"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/concepts/","tags":"","title":"Concepts"},{"body":"In addition to searching in multiple clusters, Clusterpedia can also search for resources in a specified cluster.\n Using Search Label or URL Query to specify a single cluster is not different from specifying a cluster in URL Path in terms of performance\nThis topic focuses on specifying clusters in URL Path\n Before using kubectl in the way of specifying a cluster, you need to configure the cluster shortcut for kubectl\nkubectl URL kubectl --cluster cluster-1 get deployments -n kube-system # Output: NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d  Specify a cluster by using the cluster name in the URL path\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/apis/apps/v1/deployments\" You can also specify a single cluster by URL Query\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?clusters=cluster-1\"  The function supported by searching in a specified cluster is basically the same as that of multi-cluster search.\nIt is more convenient for searching by Owner in a specified cluster. In addition, when getting a single resource, you can only use the specified cluster in the URL Path.\nSearch by Parent or Ancestor Owner To query by Owner, you shall specify a single cluster. You can use Search Label or URL Query to specify, or specify the cluster name in the URL Path.\nSearching for resources based on ancestor owners can be done with Owner UID or Owner Name, and with Owner Seniority for Owner seniority advancement.\n For the specific query parameters, you can refer to Search by Owner\n In this way, you can directly search for the Pods corresponding to a Deployment without having to query which ReplicaSet belong to that Deployment.\nUse the Owner UID Owner Name and Owner Group Resource will be ignored after Owner UID is specified.\nFirstly use kubectl to get Deployment UID\nkubectl --cluster cluster-1 get deploy fake-deploy -o jsonpath=\"{.metadata.uid}\" #Output: 151ae265-28fe-4734-850e-b641266cd5da  Getting the uid under kubectl may be tricky, but it’s usually already easier to check metadata.uid in UI scenarios\n kubectl URL Use owner-uid to specify Owner UID and use owner-seniority to promote the Owner’s seniority.\n owner-seniority is 0 by default, which represents Owner is parent. If you set it to 1, Owenr can be promoted to grandfather\n kubectl --cluster cluster-1 get pods -l \\ \"search.clusterpedia.io/owner-uid=151ae265-28fe-4734-850e-b641266cd5da,\\ search.clusterpedia.io/owner-seniority=1\"  kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/api/v1/namespaces/default/pods?ownerUID=151ae265-28fe-4734-850e-b641266cd5da\u0026ownerSeniority=1\"  Use the Owner Name If the Owner UID is not known in advance, then using Owner UID is a more troublesome way.\nWe can specify the Owner by it’s name, and we can also specify Owner Group Resource to restrict the Owner’s Group Resource.\nAgain, let’s take the example of getting the corresponding Pods under Deployment. kubectl URL kubectl --cluster cluster-1 get pods -l \\  \"search.clusterpedia.io/owner-name=deploy-1,\\ search.clusterpedia.io/owner-seniority=1\" In addition, to avoid multiple types of owner resources in some cases, we can use the Owner Group Resource to restrict the type of owner.\nkubectl --cluster cluster-1 get pods -l \\  \"search.clusterpedia.io/owner-name=deploy-1,\\ search.clusterpedia.io/owner-gr=deployments.apps,\\ search.clusterpedia.io/owner-seniority=1\"  kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/api/v1/namespaces/default/pods?ownerName=deploy-1\u0026ownerSeniority=1\"  Get a single resource When we want to use the resource name to get (Get) a resource, we must pass the cluster name in the URL Path, just like namespace.\nkubectl URL If a resource name is passed in a multi-cluster mode, an error will be reported\nkubectl --cluster cluster-1 get deploy fake-deploy # Output: CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE cluster-1 fake-deploy 1/1 1 1 35d Certainly, you can use Search Label to specify a resource name in the case of kubectl.\nHowever, if you use -o yaml or other methods to check the returned source data, it is different from using kubectl --cluster \u003ccluster name\u003e.\n# The actual server returns the DeploymentList resource, which is replaced with a list by kubectl kubectl --cluster clusterpedia get deploy -l \"search.clusterpedia.io/clusters=cluster-1,\\ search.clusterpedia.io/names=fake-deploy\" -o yaml # Output:apiVersion:v1items:- ...kind:Listmetadata:resourceVersion:\"\"selfLink:\"\"The actual returned resource is still a KindList, while kubectl --cluster \u003cclsuter name\u003e returns a specific Kind.\nkubectl --cluster cluster-1 get deploy fake-deploy -o yaml # Output:apiVersion:apps/v1kind:Deploymentmetadata:annotations:deployment.kubernetes.io/revision:\"1\"shadow.clusterpedia.io/cluster-name:cluster-1creationTimestamp:\"2021-12-16T02:26:29Z\"generation:2name:fake-deploynamespace:defaultresourceVersion:\"38085769\"uid:151ae265-28fe-4734-850e-b641266cd5daspec:...status:... The URL to get a specified resource can be divided into three parts:\n Prefix to search for resource: /apis/clusterpedia.io/v1beta1/resources Specified cluster name: /clusters/\u003c cluster name \u003e Resource name for Kubernetes API: Path /apis/apps/v1/namespaces/\u003c namespace \u003e/deployments/\u003c resource name \u003e  kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/apis/apps/v1/namespaces/default/deployments/fake-deploy\"  ","categories":"","description":"","excerpt":"In addition to searching in multiple clusters, Clusterpedia can also …","ref":"/docs/usage/search/specified-cluster/","tags":"","title":"Specified a Cluster"},{"body":"Clusterpedia 除了支持多个集群的混合检索，还可以指定集群来检索资源。\n 在性能上使用 Search Label 或者 URL Query 来指定单个集群和在 URL Path 中指定集群并无区别\n本文主要讲述在 URL Path 中指定集群\n 在以指定集群的方式使用 kubectl 前，需要先配置 kubectl 的集群快捷方式\nkubectl URL kubectl --cluster cluster-1 get deployments -n kube-system # 输出： NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d  将 cluster name 放到 URL 路径中来指定集群\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/apis/apps/v1/deployments\" 也可以通过 URL Query 来指定单个集群\nkubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/apis/apps/v1/deployments?clusters=cluster-1\"  指定集群支持的功能和多集群检索的作用基本相同，而且在 Owner 检索上更加方便， 另外在获取单个资源时也只能使用在 URL Path 中指定集群的方式。\n根据父辈或者祖辈 Owner 进行检索 Owner 查询必须指定单个集群，可以使用 Search Label 或者 URL Query 来指定，也可以在 URL Path 中指定集群名称\n通过 Owenr UID 或者 Owner Name, 并且配合用于 Owner 辈分提升的 Owenr Senirority 可以完成基于祖辈 Owner 的资源检索。\n 关于具体的查询参数，可以参考 Owner 检索\n 通过这种方式，可以直接查询到 Deployment 相应的 Pods，无需查询有哪些 ReplicaSet 属于该 Deployment。\n指定 Owner 的 UID 在指定 Owenr UID 后，Owner Name 和 Owenr Group Resource 会被忽略\n首先使用 kubectl 获取 Deployment 的 UID\nkubectl --cluster cluster-1 get deploy fake-deploy -o jsonpath=\"{.metadata.uid}\" #输出： 151ae265-28fe-4734-850e-b641266cd5da  在 kubectl 下获取 uid 可能比较麻烦，但是在 UI 场景中通常已经更容易查看 metadata.uid\n kubectl URL 使用 owner-uid 来指定 Owner 的 UID, owner-seniority 对 Owner 进行辈分提升。\n owner-seniority 默认为 0，表示 Owner 为父辈。设置为 1，提升 Owenr 辈分成为祖父 Owenr\n kubectl --cluster cluster-1 get pods -l \\ \"search.clusterpedia.io/owner-uid=151ae265-28fe-4734-850e-b641266cd5da,\\ search.clusterpedia.io/owner-seniority=1\"  kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/api/v1/namespaces/default/pods?ownerUID=151ae265-28fe-4734-850e-b641266cd5da\u0026ownerSeniority=1\"  指定 Owner Name 如果事先并不知道 Owner 的 UID，那么指定 Owner UID 是一种比较麻烦的方式。\n我们可以通过 Owner 的名字来指定 Owner，同时还可以指定 Owner Group Resource 来限制 Owner 的 Group Resource。\n同样，我们以获取 Deployment 下相应的 Pods 来举例 kubectl URL kubectl --cluster cluster-1 get pods -l \\  \"search.clusterpedia.io/owner-name=deploy-1,\\ search.clusterpedia.io/owner-seniority=1\" 另外为了避免某些情况下，owner 资源存在多种类型，我们可以使用 Owner Group Resource 来限制 Owner 的类型\nkubectl --cluster cluster-1 get pods -l \\  \"search.clusterpedia.io/owner-name=deploy-1,\\ search.clusterpedia.io/owner-gr=deployments.apps,\\ search.clusterpedia.io/owner-seniority=1\"  kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/api/v1/namespaces/default/pods?ownerName=deploy-1\u0026ownerSeniority=1\"  获取单个资源 当我们想要使用资源名称获取（Get）一个资源时，就必须要以 URL Path 的方式将集群名称传递进去，就像 namespace 一样。\nkubectl URL 如果使用多集群方式传递一个资源名称会报错\nkubectl --cluster cluster-1 get deploy fake-deploy # 输出： CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE cluster-1 fake-deploy 1/1 1 1 35d 当然在 kubectl 中也可以通过 Search Label 来指定一个资源名称。\n不过在 -o yaml 或者其他方式查看返回的源数据时，和使用 kubectl --cluster \u003ccluster name\u003e 是不一样的。\n# 实际服务端返回 DeploymentList 的资源，由 kubectl 替换成 List 资源 kubectl --cluster clusterpedia get deploy -l \"search.clusterpedia.io/clusters=cluster-1,\\ search.clusterpedia.io/names=fake-deploy\" -o yaml # 输出：apiVersion:v1items:- ...kind:Listmetadata:resourceVersion:\"\"selfLink:\"\"实际返回的资源依然是一个 KindList，而 kubectl --cluster \u003cclsuter name\u003e 返回的便是具体的 Kind。\nkubectl --cluster cluster-1 get deploy fake-deploy -o yaml # 输出：apiVersion:apps/v1kind:Deploymentmetadata:annotations:deployment.kubernetes.io/revision:\"1\"shadow.clusterpedia.io/cluster-name:cluster-1creationTimestamp:\"2021-12-16T02:26:29Z\"generation:2name:fake-deploynamespace:defaultresourceVersion:\"38085769\"uid:151ae265-28fe-4734-850e-b641266cd5daspec:...status:... 获取指定资源的 URL 可以分为三部分\n 资源检索前缀： /apis/clusterpedia.io/v1beta1/resources 指定集群名称 /clusters/\u003c cluster name \u003e 原生 Kubernetes API 的资源 Path /apis/apps/v1/namespaces/\u003c namespace \u003e/deployments/\u003c resource name \u003e  kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/resources/clusters/cluster-1/apis/apps/v1/namespaces/default/deployments/fake-deploy\"  ","categories":"","description":"","excerpt":"Clusterpedia 除了支持多个集群的混合检索，还可以指定集群来检索资源。\n 在性能上使用 Search Label 或者 URL …","ref":"/zh-cn/docs/usage/search/specified-cluster/","tags":"","title":"指定集群检索"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/concepts/","tags":"","title":"概念"},{"body":"For collection resource, refer to What is Collection Resource\nDue to the limitation of kubectl, we cannot pass search conditions through Label Selector or other methods, so it is recommended to search for Collection Resource by using a URL.\nURL kubectl  When requesting Collection Resource, you shall use paging because the number of resources may be very large.\n kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/collectionresources/workloads?limit=1\" | jq # Output { \"kind\": \"CollectionResource\", \"apiVersion\": \"clusterpedia.io/v1beta1\", \"metadata\": { \"name\": \"workloads\", \"creationTimestamp\": null }, \"resourceTypes\": [ { \"group\": \"apps\", \"version\": \"v1\", \"kind\": \"Deployment\", \"resource\": \"deployments\" }, { \"group\": \"apps\", \"version\": \"v1\", \"resource\": \"daemonsets\" }, { \"group\": \"apps\", \"version\": \"v1\", \"resource\": \"statefulsets\" } ], \"items\": [ { \"apiVersion\": \"apps/v1\", \"kind\": \"Deployment\", ... } ] } The complex search of Collection Resource is basically the same as the function of multi-cluster resource search, only some operations are not supported:\n Search by Owner is not supported. If you need to specify a specific resource type to search by Owner, you can refer to multi-cluster resource search and specified cluster search Getting a specific single resource in Collection Resource is not supported, because you shall specify cluster and type for a specific resource. In this case, you can use Get a single resource.   It is not easy to search for Collection Resource by using kubectl. However, you can have a try.\n kubectl cannot pass pages and other search conditions and may get all Collection Resources at one time. It is not recommended to use kubectl to view Collection Resource if a large number of clusters are imported or a cluster has many deployments, daemonsets and statefulsets resources.\n kubectl get collectionresources workloads # Output CLUSTER GROUP VERSION KIND NAMESPACE NAME AGE cluster-1 apps v1 DaemonSet kube-system vsphere-cloud-controller-manager 63d cluster-2 apps v1 Deployment kube-system calico-kube-controllers 109d cluster-2 apps v1 Deployment kube-system coredns-coredns 109d ... Search for Collection Resource by using URL\n ","categories":"","description":"","excerpt":"For collection resource, refer to What is Collection Resource\nDue to …","ref":"/docs/usage/search/collection-resource/","tags":"","title":"Collection Resource"},{"body":"关于聚合资源的概念可以查看 什么是聚合资源 （Collection Resource）\n由于 kubectl 的限制，我们无法通过 Label Selector 或者其他方式来传递检索参数， 所以建议以 URL 的方式来检索聚合资源。\nURL kubectl  请求聚合资源时，由于资源数量可能会非常大，一定要搭配分页功能使用。\n kubectl get --raw=\"/apis/clusterpedia.io/v1beta1/collectionresources/workloads?limit=1\" | jq # 输出 { \"kind\": \"CollectionResource\", \"apiVersion\": \"clusterpedia.io/v1beta1\", \"metadata\": { \"name\": \"workloads\", \"creationTimestamp\": null }, \"resourceTypes\": [ { \"group\": \"apps\", \"version\": \"v1\", \"kind\": \"Deployment\", \"resource\": \"deployments\" }, { \"group\": \"apps\", \"version\": \"v1\", \"resource\": \"daemonsets\" }, { \"group\": \"apps\", \"version\": \"v1\", \"resource\": \"statefulsets\" } ], \"items\": [ { \"apiVersion\": \"apps/v1\", \"kind\": \"Deployment\", ... } ] } 聚合资源的复杂检索和多集群资源检索 功能基本相同，只有部分操作不支持：\n 不支持根据 Owner 检索，如果需要进行根据 Owner 检索需要指定具体的资源类型，可以参考 多集群检索 和 指定集群检索 不支持在 Collection Resource 中获取具体的单个资源，因为具体资源需要指定集群和资源类型，可以使用 获取单个资源   尽管 kubectl 无法很好的检索聚合资源，但是可以简单的体验一下。\n 由于无法传递分页以及其他检索条件，kubectl 会一次获取到所有的聚合资源，在接入了大量集群或者存在大量 deployments，daemonsets，statefulsets 资源时，不要使用 kubectl 来查看聚合资源\n kubectl get collectionresources workloads # 输出 CLUSTER GROUP VERSION KIND NAMESPACE NAME AGE cluster-1 apps v1 DaemonSet kube-system vsphere-cloud-controller-manager 63d cluster-2 apps v1 Deployment kube-system calico-kube-controllers 109d cluster-2 apps v1 Deployment kube-system coredns-coredns 109d ... 请使用 URL 来检索聚合资源\n ","categories":"","description":"","excerpt":"关于聚合资源的概念可以查看 什么是聚合资源 （Collection Resource）\n由于 kubectl 的限制， …","ref":"/zh-cn/docs/usage/search/collection-resource/","tags":"","title":"聚合资源检索"},{"body":"How to install by Helm is in the process of developing, refer to clusterpedia required helm deployment\n","categories":"","description":"","excerpt":"How to install by Helm is in the process of developing, refer to …","ref":"/docs/installation/helm/","tags":"","title":"Helm"},{"body":"Helm 安装正在开发中 clusterpedia required helm deployment\n","categories":"","description":"","excerpt":"Helm 安装正在开发中 clusterpedia required helm deployment\n","ref":"/zh-cn/docs/installation/helm/","tags":"","title":"使用 Helm"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/usage/","tags":"","title":"Usage"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/usage/","tags":"","title":"使用"},{"body":"When using feature functionality, users need to enabled the corresponding feature gates.\nFor example, enable SyncAllResources of clustersynchro manager to allow the user of All-resources Wildcard\n# ignore other flags ./bin/clustersynchro-manager --feature-gates=SyncAllResources=true Clusterpedia APIServer and Clusterpedia ClusterSynchro Manager have different feature gates.\nAPIServer    desc feature gate default     Set the default to return the number of resources remaining RemainingItemCount false   Raw SQl Query AllowRawSQLQuery false    ClusterSynchro Manager    desc feature gate default     Prune metadata.managedFields PruneManagedFields true   Prune metadata.annotations['lastAppliedConfiguration'] PruneLastAppliedConfiguration true   Allows synchronization of all types of custom resources AllowSyncCustomResources false   Allows synchronization of all types of resources AllowSyncAllResources false    ","categories":"","description":"","excerpt":"When using feature functionality, users need to enabled the …","ref":"/docs/features/","tags":"","title":"Features"},{"body":"用户在使用特性功能时，需要开启相应的特性门控。 例如开启 clustersynchro manager 的 SyncAllResources 来允许使用 全资源通配符\n# 忽略其他参数 ./bin/clustersynchro-manager --feature-gates=SyncAllResources=true Clusterpedia APIServer 和 Clusterpedia ClusterSynchro Manager 分别具有不同的特性门控\nAPIServer    作用 feature gate 默认值     设置默认返回剩余的资源数量 RemainingItemCount false   原生 SQL 查询 AllowRawSQLQuery false    ClusterSynchro Manager    作用 feature gate 默认值     裁剪 metadata.managedFields 字段 PruneManagedFields true   裁剪 metadata.annotations['lastAppliedConfiguration'] 字段 PruneLastAppliedConfiguration true   允许同步所有类型的自定义资源 AllowSyncCustomResources false   允许同步所有类型的资源 AllowSyncAllResources false    ","categories":"","description":"","excerpt":"用户在使用特性功能时，需要开启相应的特性门控。 例如开启 clustersynchro manager 的 SyncAllResources …","ref":"/zh-cn/docs/features/","tags":"","title":"特性功能"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/","tags":"","title":"Blog"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu629dc54e681a6f98b3ff241b67cb80fe_677037_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu629dc54e681a6f98b3ff241b67cb80fe_677037_1920x1080_fill_q75_catmullrom_top.jpg); } }  Welcome to Clusterpedia Lean More   Source Code   The Encyclopedia of Kubernetes clusters           Synchronize and search for multi-cluster resources   Clusterpedia can synchronize resources with multiple clusters and provide more powerful search features     Support for extensive resources  Clusterpedia can search for multi-cluster resources by different types such as Pod or Deployment,\nand support combining multiple resources (such as Workload) into a Collection Resource to search for.\nSearch for Custom Resource\n     Compatible with Kubernetes OpenAPI  Clusterpedia can leverage existing tools such as kubectl or client-go to search for multi-cluster resources without additional frameworks or tools\n     Support complex search  Based on compatibility with Kubernetes OpenAPI, in addition to supporting Label Selector,\nit also supports more complex and useful search conditions, for example:\n Specify multiple clusters and namespaces\n Use more powerfule Field Selector to filter resources by any fileds  Query descendant resources via a parent or even ancestor Owner  Sort by multiple resource fields\n Support pagination and remaining items count\n      Join us on Slack Join the community on Slack\n Join us …\n   Welcome to join Clusterpedia! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n Contribute to Clusterpedia …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"Clusterpedia"},{"body":"  #td-cover-block-0 { background-image: url(/zh-cn/featured-background_hu629dc54e681a6f98b3ff241b67cb80fe_677037_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/zh-cn/featured-background_hu629dc54e681a6f98b3ff241b67cb80fe_677037_1920x1080_fill_q75_catmullrom_top.jpg); } }  欢迎来到 Clusterpedia Lean More   Source Code   The Encyclopedia of Kubernetes clusters           混合检索多集群的资源   通过 Clusterpedia 可以一次获取多个集群内的资源，并且支持强大的检索条件     丰富的资源支持  Clusterpedia 不仅仅支持以 Pods, Deployments 等资源类型来检索多个集群中资源，\n还支持将多个资源组合成集合资源（Collection Resource）来聚合检索多个类型的资源，例如 Workloads。\n支持检索自定义资源\n     兼容 Kubernetes OpenAPI  可以利用已有的工具，例如 kubectl 或者 client-go 来检索多集群资源，无需额外框架或者工具\n     强大的检索条件支持  在兼容 Kubernetes OpenAPI 的基础上，除了支持 Label Selector 外，还支持更加复杂和使用的检索条件，例如\n 支持检索多个集群以及命名空间下的资源，\n 更加强大的 Field Selector, 支持筛选资源的任意字段，\n 可以通过父辈甚至祖辈 Owner 来查询后代资源，  基于多个资源字段的排序，\n 分页以及 remaining items count 支持\n      Join us on Slack Join the community on Slack\n Join us …\n   欢迎加入 Clusterpedia! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n Contribute to Clusterpedia …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/zh-cn/","tags":"","title":"Clusterpedia"},{"body":"With the release of Clusterpedia 0.1.0, we can now update the earlier 0.0.9-alpha or 0.0.8 to 0.1.0\nClean Resources Since the url path to search resources has been modified(#73), we need to use cealn-clusterconfigs.sh in 0.0.9-alpha to clean up the cluster shortcut in the .kube/config\ncurl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.0.9-alpha/hack/clean-clusterconfigs.sh | sh - Backup and delete the PediaCluster resources.\nkubectl get pediacluster -o yaml \u003e clusters.yaml.bak kubectl delete pediacluster --all After all PediaCluster resources have been deleted, remove the PediaCluster CRD\nkubectl delete crd pediaclusters.clusters.clusterpedia.io Remove the APIServices used to register the Aggregated API\nkubectl delete apiservices v1alpha1.pedia.clusterpedia.io Upgrade Clusterpedia Create PediaCluster CRD, and upgrade Clusterpedia APIServer and Clustersynchro Manager.\nDEPLOY_YAML_PATH=https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.1.0/deploy CRD_YAML_PATH=$DEPLOY_YAML_PATH/crds kubectl apply -f \\  $CRD_YAML_PATH/cluster.clusterpedia.io_pediaclusters.yaml,\\  $DEPLOY_YAML_PATH/clusterpedia_clustersynchro_manager_deployment.yaml,\\  $DEPLOY_YAML_PATH/clusterpedia_apiserver_deployment.yaml,\\  $DEPLOY_YAML_PATH/clusterpedia_apiserver_apiservice.yaml We can also download the YAML locally, or pull the clusterpedia locally and go to ./deploy directory and run kubectl apply\nRe-import the clusters Since the APIVersion and schema of PediaCluster have been optimized for incompatibility, it it necessary to recreate PediaCluster based on the backed up clusters.yaml.bak.\nThe current example of PediaCluster:\napiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-examplespec:apiserver:\"https://10.30.43.43:6443\"caData:tokenData:certData:keyData:syncResources:- group:appsresources:- deployments- group:\"\"resources:- podsThere are three main changes compared to 0.0.9-alpha:\n apiVersion: clusters.clusterpedia.io/v1alpha1 -\u003e cluster.clusterpedia.io/v1alpha2 spec.apiserverURL -\u003e spec.apiserver spec.resources -\u003e spec.syncResources   The specific changes can be viewed: #70 #67 #76 #77\n Create new pediaclusters based on the old pediaclusters in clusters.yaml.bak\napiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-1spec:{}---apiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-2spec:{}View clusters status\nkubectl get pediacluster Configure the cluster shortcut for kubectl\ncurl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.1.0/hack/gen-clusterconfigs.sh | sh - ","categories":"","description":"","excerpt":"With the release of Clusterpedia 0.1.0, we can now update the earlier …","ref":"/blog/2022/02/15/upgrade-to-clusterpedia-0.1.0/","tags":"","title":"Upgrade to Clusterpedia 0.1.0"},{"body":"随着 Clusterpedia 0.1.0 版本的发布，我们可以将早期的 0.0.9-alpha 或者 0.0.8 更新到 0.1.0 了。\n旧版本资源清理 由于资源检索的路径发生了修改(#73)，所以需要使用 0.0.9-alpha 的 clean-clusterconfigs.sh 来清理 .kube/config 中的 Clusterpedia 集群访问配置\ncurl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.0.9-alpha/hack/clean-clusterconfigs.sh | sh - 备份并删除 PediaCluster 资源\nkubectl get pediacluster -o yaml \u003e clusters.yaml.bak kubectl delete pediacluster --all 所有的 PediaCluster 资源都删除后，删除 PediaCluster CRD\nkubectl delete crd pediaclusters.clusters.clusterpedia.io 删除用于注册聚合式 API 的 APIServices\nkubectl delete apiservices v1alpha1.pedia.clusterpedia.io 更新 Clusterpedia 新建 PediaCluster CRD, 并且更新 Clusterpedia APIServer 和 Clustersynchro Manager\nDEPLOY_YAML_PATH=https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.1.0/deploy CRD_YAML_PATH=$DEPLOY_YAML_PATH/crds kubectl apply -f \\  $CRD_YAML_PATH/cluster.clusterpedia.io_pediaclusters.yaml,\\  $DEPLOY_YAML_PATH/clusterpedia_clustersynchro_manager_deployment.yaml,\\  $DEPLOY_YAML_PATH/clusterpedia_apiserver_deployment.yaml,\\  $DEPLOY_YAML_PATH/clusterpedia_apiserver_apiservice.yaml 可以将 YAML 下载到本地，或者拉取项目到本地，进入 ./deploy 目录下执行 kubectl apply。\n重新接入集群 由于 PediaCluster 的 APIVersion 和结构都进行了一些不兼容的优化，所以需要重新根据备份的 clusters.yaml.bak 来重新创建 PediaCluster。\n当前 PediaCluster 的示例为：\napiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-examplespec:apiserver:\"https://10.30.43.43:6443\"caData:tokenData:certData:keyData:syncResources:- group:appsresources:- deployments- group:\"\"resources:- pods相比 0.0.9-alpha 主要有三个修改：\n apiVersion 由 clusters.clusterpedia.io/v1alpha1 -\u003e cluster.clusterpedia.io/v1alpha2 spec.apiserverURL -\u003e spec.apiserver spec.resources -\u003e spec.syncResources   具体的修改可以查看: #70 #67 #76 #77\n 根据 clusters.yaml.bak 内旧的 PediaCluster 来创建新的 PediaCluster。\napiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-1spec:{}---apiVersion:cluster.clusterpedia.io/v1alpha2kind:PediaClustermetadata:name:cluster-2spec:{}查看集群接入状态\nkubectl get pediacluster 为多集群检索生成快捷访问配置\ncurl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.1.0/hack/gen-clusterconfigs.sh | sh - ","categories":"","description":"","excerpt":"随着 Clusterpedia 0.1.0 版本的发布，我们可以将早期的 0.0.9-alpha 或者 0.0.8 更新到 0.1.0 了。 …","ref":"/zh-cn/blog/2022/02/15/%E5%8D%87%E7%BA%A7%E5%88%B0-clusterpedia-0.1.0/","tags":"","title":"升级到 Clusterpedia 0.1.0"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/blog/","tags":"","title":"博客"},{"body":" About Clusterpedia The Encyclopedia of Kubernetes clusters        This name Clusterpedia is inspired by Wikipedia.\nIt is an encyclopedia of multi-cluster to synchronize, search for, and simply control multi-cluster resources.\nClusterpedia can synchronize resources with multiple clusters and provide more powerful search features on the basis of compatibility with Kubernetes OpenAPI to help you effectively get any multi-cluster resource that you are looking for in a quick and easy way.\n    Features Support for complex search, filters, sorting, paging, and more Support for requesting relevant resources when you query resources Unify the search entry for master clusters and multi-cluster resources Compatible with kubernetes OpenAPI, where you can directly use kubectl for multi-cluster search without any third-party plug-ins or tools Compatible with synchronizing different versions of cluster resources, not restricted by the version of master cluster High performance and low memory consumption for resource synchronization Automatically start/stop resource synchronization according to the current health status of the cluster Support for plug-in storage layer. You can use other storage components to customize the storage layer according to your needs. High availability     ","categories":"","description":"","excerpt":" About Clusterpedia The Encyclopedia of Kubernetes clusters …","ref":"/about/","tags":"","title":"About Clusterpedia"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/installation/configuration/","tags":"","title":"Configuration"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/concepts/pediacluster/","tags":"","title":"PediaCluster"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/concepts/pediacluster/","tags":"","title":"PediaCluster"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/release-notes/","tags":"","title":"Release notes"},{"body":"Clusterpedia supports complex search for multi-cluster resources, specified cluster resoruces, and Collection Resources.\nAnd these complex search conditions can be passed to Clusterpedia APIServer in two ways:\n URL Query: directly pass query conditions as Query Search Labels: to keep compatible with Kubernetes OpenAPI, the search conditions can be set via Label Selector  Both Search Labels and URL Query support same operators as Label Selector:\n exist, not exist =, ==, != in, notin  In addition to conditional retrieval, Clusterpedia also enhances Field Selector to meet the filtering requirements by fields such as metadata.annotation or status.*.\nSearch by metadata  Supported Operators: ==, =, in.\n    Role search label key url query     Filter cluster names search.clusterpedia.io/clusters clusters   Filter namespaces search.clusterpedia.io/namespaces namespaces   Filter resource names search.clusterpedia.io/names names     Current, we don’t support operators such as !=, notin operators, if you have these needs or scenarios, you can discuss them in the issue.\n Fuzzy Search  Supported Operators: ==, =, in.\n This feature is expermental and only search label are available for now\n   Role search label key url query     Fuzzy Search for resource name internalstorage.clusterpedia.io/fuzzy-name -    Search by creation time interval  Supported Operators: ==, =.\n The search is based on the creation time interval of the resource, using a left-closed, right-open internval.\n   Role search label key url query     Search search.clusterpedia.io/since since   Before search.clusterpedia.io/before before    There are four formats for creation time:\n Unix Timestamp for ease of use will distinguish between units of s or ms based on the length of the timestamp. The 10-bit timestamp is in seconds, the 13-bit timestamp is in milliseconds. RFC3339 2006-01-02T15:04:05Z or 2006-01-02T15:04:05+08:00 UTC Date 2006-01-02 UTC Datetime 2006-01-02 15:04:05  Because of the limitation of the kube label selector, the search label only supports Unix Timestamp and UTC Date.\nAll formats are available using the url query method.\nSearch by Owner  Supported Operators: ==, =.\n    Role search label key url query     Specified Owner UID search.clusterpedia.io/owner-uid ownerUID   Specified Owner Name search.clusterpedia.io/owner-name ownerName   SPecified Owner Group Resource search.clusterpedia.io/owner-gr ownerGR   Specified Owner Seniority internalstorage.clusterpedia.io/owner-seniority ownerSeniority    Note that when specifying Owner UID, Owner Name and Owner Group Resource will be ignored.\nThe format of the Owner Group Resource is resource.group, for example deployments.apps or nodes.\nOrderBy  Supported Operators: =, ==, in.\n    Role search label key url query     Order by fields search.clusterpedia.io/orderby orderby    Paging  Supported Operators: =, ==.\n    Role search label key url query     Set page size search.clusterpedia.io/size limit   Set page offset search.clusterpedia.io/offset continue   Response required with Continue search.clusterpedia.io/with-continue withContinue   Response required with remaining count search.clusterpedia.io/with-remaining-count withRemainingCount     When you perform operations with kubectl, the page size can only be set via kubectl --chunk-size, because kubectl will set the default limit to 500.\n Label Selector Regardless of kubectl or URL, all Label Selectors that do not contain clusterpedia.io in the Key will be used as Label Selectors to filter resources.\nAll behaviors are consistent with those provided by Kubernetes.\n   Role kubectl url query     Filter by labels kubectl -l or kubectl --label-selector labelSelector    Field Selector Field Selector is consistent with Label Selector in terms of operators, and Clusterpedia also supports:\nexist, not exist, ==, =, !=, in, notin.\nAll command parameters for URL and kubectl are same as those for Field Selector.\n   Role kubectl url query     Filter by fields kubectl --field-selector fieldSelector    For details refer to:\n search for resources by filtering fields support field selector issue: support list field filtering  Advanced Search(Custom Conditional Search) Custom search is a feature provided by the default storage layer to meet more flexible and variable search needs of users.\n   Feature search label key url query     custom SQL used for filter - whereSQL    Custom search is not supported by search label, only url query can be used to pass custom search SQL.\nIn addition, this feature is still in alpha stage, you need to open the corresponding Feature Gate in clusterpedia apiserver, for details, please refer to Raw SQL Query\n","categories":"","description":"","excerpt":"Clusterpedia supports complex search for multi-cluster resources, …","ref":"/docs/usage/search/","tags":"","title":"Search"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/tags/","tags":"","title":"Tags"},{"body":" 关于 Clusterpedia The Encyclopedia of Kubernetes clusters        Clusterpedia 这个名称借鉴自 Wikipedia，是多集群的百科全书，其核心理念是收集、检索和简单控制多集群资源。\n通过聚合收集多集群资源，在兼容 Kubernetes OpenAPI 的基础上额外提供更加强大的检索功能，让用户更方便快捷地在多集群中获取想要的任何资源。\n    支持的功能  支持复杂的检索条件、过滤条件、排序、分页等等 支持查询资源时请求附带关系资源 统一主集群和多集群资源检索入口 兼容 kubernetes OpenAPI，可以直接使用 kubectl 进行多集群检索，而无需第三方插件或者工具 兼容收集不同版本的集群资源，不受主集群版本约束 资源收集高性能，低内存 根据集群当前的健康状态，自动开始/停止资源收集 插件化存储层，用户可以根据自己需求使用其他存储组件自定义存储层 高可用      ","categories":"","description":"","excerpt":" 关于 Clusterpedia The Encyclopedia of Kubernetes clusters …","ref":"/zh-cn/about/","tags":"","title":"关于 Clusterpedia"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/","tags":"","title":"文档"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/release-notes/","tags":"","title":"版本日志"},{"body":"Clusterpedia 支持对 多个集群内资源，指定集群的资源 以及聚合资源 的复杂检索，\n并且这些复杂检索的条件可以通过两种方式传递给 Clusterpedia APIServer：\n URL Query：直接将查询条件作为 Query 来传递 Search Labels：为了兼容 Kubernetes OpenAPI，可以将查询条件设置在 Label Selector。  Search Labels 和 URL Query 都支持与 Label Selector 相同的操作符：\n exist，not exist =，==，!= in，notin  除了条件检索，Clusterpedia 还增强了 Field Selector ，满足我们通过 metadata.annotation 或者 status.* 等字段的过滤需求。\n元信息检索  支持的操作符：==，=，in。\n    作用 search label key url query     过滤集群名称 search.clusterpedia.io/clusters clusters   过滤命名空间 search.clusterpedia.io/namespaces namespaces   过滤资源名称 search.clusterpedia.io/names names     暂时不支持例如 !=，notin 操作符，如果有这些需求或者场景，可以在 issue 中讨论\n 模糊搜索  支持的操作符：==，=，in。\n 该功能暂时为试验性功能，暂时只提供 search label\n   作用 search label key url query     模糊搜索资源名称 internalstorage.clusterpedia.io/fuzzy-name -    创建时间区间检索  支持的操作符：==，=。\n 基于资源的创建时间区间进行检索，采用的是左闭右开的区间\n   作用 search label key url query     指定 Since search.clusterpedia.io/since since   指定 Before search.clusterpedia.io/before before    创建时间的格式有四种：\n Unix 时间戳格式 为了方便使用会根据时间戳的长度来区分单位为 s 还是 ms。 10 位时间戳单位为秒，13 位时间戳单位为毫秒。 RFC3339 2006-01-02T15:04:05Z or 2006-01-02T15:04:05+08:00 UTC Date 2006-01-02 UTC Datetime 2006-01-02 15:04:05  由于 kube label selector 的限制，search label 只支持 Unix 时间戳，UTC Date.\n使用 url query 的方式可以所有的格式\nOwner 检索  只支持操作符：==，=。\n    作用 search label key url query     指定 Owner UID search.clusterpedia.io/owner-uid ownerUID   指定 Owner Name search.clusterpedia.io/owner-name ownerName   指定 Owner Group Resource search.clusterpedia.io/owner-gr ownerGR   指定 Owner 辈分 internalstorage.clusterpedia.io/owner-seniority ownerSeniority    需要注意指定 Owner UID 时，Owner Name 和 Owner Group Resource 会被忽略\nOwner Group 的格式为 resource.group，例如 deployments.apps 或者 nodes\n排序  只支持操作符：=，==，in。\n    作用 search label key url query     多字段排序 search.clusterpedia.io/orderby orderby    分页  只支持操作符 =，==。\n    作用 search label key url query     设置分页 size search.clusterpedia.io/size limit   设置分页 offset search.clusterpedia.io/offset continue   要求响应携带 Continue search.clusterpedia.io/with-continue withContinue   要求响应携带资源剩余数量 search.clusterpedia.io/with-remaining-count withRemainingCount     在使用 kubectl 操作时，分页 size 只能通过 kubectl --chunk-size 来设置，因为 kubectl 会将 limit 默认设置为 500。\n Label 过滤 无论使用 kubectl 还是 URL，所有 Key 中不包含 clusterpedia.io 的 Label Selector 都会作为 Label Selector 来过滤资源。\n所有行为和原生 Kubernetes 一致。\n   作用 kubectl url query     Label 过滤 kubectl -l or kubectl --label-selector labelSelector    字段过滤 Clusterpedia 的 Field Selector 在操作符上与 Label Selector 保持一致，同样支持：\nexist，not exist，==，=，!=，in，notin。\n无论是 URL 还是 kubectl 上的命令参数都原生 Field Selector 一致\n   作用 kubectl url query     字段过滤 kubectl --field-selector fieldSelector    详细可以查看：\n 使用字段过滤来检索资源 support field selector issue: support list field filtering  高级检索(自定义条件检索) 自定义检索为 默认存储层 提供的功能，目的是为了满足用户更加灵活多变的检索需求\n   作用 search label key url query     自定义检索语句 - whereSQL    自定义检索并不支持通过 search lable，只能使用 url query 来传递自定义搜素的语句。\n另外该功能暂时还是处于 alpha 阶段，需要用户在 clusterpedia apiserver 中开启相应的 Feature Gate，详细可以参考 自定义条件检索\n","categories":"","description":"","excerpt":"Clusterpedia 支持对 多个集群内资源，指定集群的资源 以及聚合资源 的复杂检索， …","ref":"/zh-cn/docs/usage/search/","tags":"","title":"资源检索"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/installation/configurate/","tags":"","title":"配置"}]