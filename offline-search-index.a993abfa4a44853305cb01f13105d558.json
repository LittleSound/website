[{"body":"Clusterpedia 的默认存储层支持 MySQL 和 PostgreSQL 两种存储组件。\n用户在安装 Clusterpedia 时，可以使用已有存储组件，不过需要创建相应的默认存储层配置（ConfigMap） 和存储组件密码（Secret）\n默认存储层配置 用户需要在 clusterpedia-system 命名空间下创建 clusterpedia-internalstorage ConfigMap。\n# internalstorage configmap exampleapiVersion:v1kind:ConfigMapmetadata:name:clusterpedia-internalstoragenamespace:clusterpedia-systemdata:internalstorage-config.yaml:|type: \"mysql\" host: \"clusterpedia-internalstorage-mysql\" port: 3306 user: root database: \"clusterpedia\" log: slowThreshold: \"100ms\"internalstorage config 支持以下基本字段:\n   field description     type 存储组件的类型，支持 “postgres” 和 “mysql”   host 存储组件地址，可以使用 IP 或者 Service Name   port 存储组件端口   user 存储组件用户   password 存储组件密码   database Clusterpedia 所使用的 database    日志配置 支持配置存储层日志，通过 log 字段来开启日志打印慢 SQL 和错误\n   field description     log.stdout 打印日志到标准输出   log.colorful 是否开启彩色打印   log.slowThreshold 设置慢 SQL 阀值，例如 “100ms”   log.level 设置日志级别，支持 Slient, Error, Warn, Info    开启日志打印后，如果 log.stdout 不为 true，则将日志输出到 /var/log/clusterpedia/internalstorage.log 文件中\n关闭日志打印 在 internalstorage config 不填写 log 字段，便会忽略日志打印，例如：\ntype:\"mysql\"host:\"clusterpedia-internalstorage-mysql\"port:3306user:rootdatabase:\"clusterpedia\"更多配置 默认存储层还提供了更多的配置，可以参考 internalstorage/config.go\n配置存储组件 Secret Clusterpedia 的安装 yaml 会从 internalstroage-password 的 Secret 中获取密码。\n将存储组件密码配置到 Secret 中\nkubectl -n clusterpedia-system create secret generic internalstorage-password --from-literal=password=dangerous0 ","categories":"","description":"","excerpt":"Clusterpedia 的默认存储层支持 MySQL 和 PostgreSQL 两种存储组件。\n用户在安装 Clusterpedia 时， …","ref":"/zh-cn/docs/installation/configurate/configurate-internalstorage/","tags":"","title":"配置存储层"},{"body":"Clusterpedia 通过 PediaCluster 资源来接入集群，通过配置集群的 APIServer 地址以及验证信息来连接到指定集群中\napiVersion:clusters.clusterpedia.io/v1alpha1kind:PediaClustermetadata:name:cluster-examplespec:apiserverURL:\"https://10.30.43.43:6443\"caData:tokenData:certData:keyData:apiserverURL 作为被接入集群的地址时必不可少的，而验证字段的配置有多种选择：\n caData + tokenData caData + certData + keyData   caData 在集群 APIServer 允许 Insecure 连接的情况下，也可以不填\n 这些验证字段都需要 base64 编码，如果这些字段的值是直接从 ConfigMap 或者 Secret 中获取的话，那么就已经 base64 过\n使用 ServiceAccount 来接入集群 用户可以选择在被接入集群中创建 ServiceAccount 并配置相应的 RBAC 来接入集群。\n# 注意：当前 kubectl 连接到被接入集群 kubectl apply -f https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/main/examples/clusterpedia_synchro_rbac.yaml # 获取 Service Account 对应 CA 和 Token SYNCHRO_CA=$(kubectl get secret $(kubectl get serviceaccount clusterpedia-synchro -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.ca\\.crt}') SYNCHRO_TOKEN=$(kubectl get secret $(kubectl get serviceaccount clusterpedia-synchro -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}') 将 $SYNCHRO_CA 和 SYNCHRO_TOKEN 分别填写到 PediaCluster 资源的 spec.caData 和 tokenData 字段中\n创建 PediaCluster 完善集群的验证信息后，就可以获得一个完整的 PediaCluster 资源了。直接使用 kubectl apply -f 直接创建即可\napiVersion:clusters.clusterpedia.io/v1alpha1kind:PediaClustermetadata:name:cluster-examplespec:apiserverURL:https://10.6.100.10:6443caData:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==tokenData:ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrMHRSalJtZGpSdVgxcFljMGxsU1ZneFlXMHpPSFZOY0Zwbk1UTkhiVFpsVFZwQ2JIWk9SbU5XYW5NaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbU5zZFhOMFpYSndaV1JwWVMxemVXNWphSEp2TFhSdmEyVnVMVGsxYTJSNElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVibUZ0WlNJNkltTnNkWE4wWlhKd1pXUnBZUzF6ZVc1amFISnZJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpYSjJhV05sTFdGalkyOTFiblF1ZFdsa0lqb2lNREl5WXpNMk5USXRPR1k0WkMwME5qSmtMV0l6TnpFdFpUVXhPREF3TnpFeE9HUTBJaXdpYzNWaUlqb2ljM2x6ZEdWdE9uTmxjblpwWTJWaFkyTnZkVzUwT21SbFptRjFiSFE2WTJ4MWMzUmxjbkJsWkdsaExYTjVibU5vY204aWZRLkF4ZjhmbG5oR0lDYjJaMDdkT0FKUW11aHVIX0ZzRzZRSVY5Sm5sSmtPUnF5aGpWSDMyMkVqWDk1bVhoZ2RVQ2RfZXphRFJ1RFFpLTBOWDFseGc5OXpYRks1MC10ZzNfYlh5NFA1QnRFOUpRNnNraUt4dDFBZVJHVUF4bG5fVFU3SHozLTU5Vnl5Q3NwckFZczlsQWQwRFB6bTRqb1dyS1lKUXpPaGl5VjkzOWpaX2ZkS1BVUmNaMVVKVGpXUTlvNEFFY0hMdDlyTEJNMTk2eDRkbzA4ZHFaUnVtTzJZRXFkQTB3ZnRxZ2NGQzdtTGlSVVhkWElkYW9CY1BuWXBwM01MU3B5QjJQMV9vSlRFNS1nd3k4N2Jwb3U1RXo2TElSSExIeW5NWXAtWVRLR2hBbDJwMXdJb0tDZUNnQng4RlRfdzM4Rnh1TnE0UDRoQW5RUUh6bU9Ndw==集群查看 集群接入成功后，可以通过 kubectl get pediacluster 命令来查看所有接入的集群，以及集群状态\nkubectl get pediacluster NAME APISERVER URL VERSION STATUS cluster-1 https://10.6.100.10:6443 v1.22.2 Healthy cluster-2 https://10.50.10.11:16443 v1.10.11 Healthy 接下来 继续查看 通过集群资源 来同步集群内资源\n","categories":"","description":"","excerpt":"Clusterpedia 通过 PediaCluster 资源来接入集群，通过配置集群的 APIServer 地址以及验证信息来连接到指定集 …","ref":"/zh-cn/docs/usage/import-clusters/","tags":"","title":"集群接入"},{"body":"Clusterpedia 的主要功能，便是提供对多集群内的资源进行复杂检索。\n通过 PediaCluster 资源来指定该集群中哪些资源需要支持复杂检索，Clusterpedia 会将这些资源实时的同步到存储层中\napiVersion:clusters.clusterpedia.io/v1alpha1kind:PediaClustermetadata:name:cluster-examplespec:apiserverURL:\"https://10.30.43.43:6443\"resources:- group:appsresources:- deployments- group:\"\"resources:- pods- configmsp- group:cert-manager.ioversions:- v1resources:- certificates内置资源同步 PediaCluster 为了方便管理和查看这些同步的资源，用户需要以 Group 为单位来配置资源\nresources:- group:appsversions:[]resources:- deployments- daemonsets对于内置资源，不需要填写 versions 字段。\nClusterpedia 会根据该集群内所支持的资源版本自动选择合适的版本来收集， 并且用户无需担心版本转换的问题， Clusterpedia 会开放出该内置资源的所有版本接口\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } } 自定义资源同步 相比内置资源，自定义资源在资源版本的配置上会稍有不同。\nresources: - group: cert-manager.io versions: [] resources: - certificates 用户同样可以忽略 versions 字段，这时 Clusterpedia 就会同步该 Group 在该集群的前三个版本。\n以 cert-manager.io 为例，获取集群中 cert-manager.io 支持的 Group\nkubectl --cluster clusterpedia get --raw=\"/apis/cert-manager.io\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"cert-manager.io\", \"versions\": [ { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"cert-manager.io/v1beta1\", \"version\": \"v1beta1\" }, { \"groupVersion\": \"cert-manager.io/v1alpha3\", \"version\": \"v1alpha3\" }, { \"groupVersion\": \"cert-manager.io/v1alpha2\", \"version\": \"v1alpha2\" } ], \"preferredVersion\": { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } } 可以看到，当前集群支持 cert-manager.io 的 v1，v1beta1，v1alpha3，v1alpha2 四个版本。\n当 resources.[group].versions 为空时，Clusterpedia 就会以 APIGroup.versions 列表的顺序，收集 v1， v1beta1，v1alpah3 三个版本，而 v1alpha2 不会被收集\n如果用户指定了 versions，那么就会按照 versions 的配置来收集指定的版本资源。\nresources: - group: cert-manager.io versions: - v1beta1 resources: - certificates 这时，只会收集 v1beta1 版本。\n使用注意 自定义资源收集暂时不支持版本转换，收集了哪些版本，那么就只支持哪些资源版本的收集。\n这时在检索多集群资源时，如果 cluster-1 只收集了 v1beta1 版本的资源，而检索请求 v1 版本的资源便会忽略 cluster-1 所收集的 v1beta1 版本\n需要用户去协调处理多个集群内的版本情况\n查看资源同步状态 我们可以通过 PediaCluster 资源的 Status 来查看资源的信息，同步的资源版本和状态以及存储版本\n在 Status 中，资源会有同步版本和存储版本：\n 同步版本是 Clusterpedia 从被同步集群中获取到的资源的版本 存储版本是 Clusterpedia 存储到存储层中的版本  status:resources:- group:appsresources:- kind:Deploymentnamespaced:trueresource:deploymentssyncConditions:- lastTransitionTime:\"2022-01-13T04:34:08Z\"status:SyncingstorageVersion:v1version:v1通常集群资源的同步版本和存储版本是相同的。\n但是当接入一个比较老的集群时，集群只提供了 v1beta1 版本的 Deployment 资源，而这时资源的同步版本为 v1beta1，存储版本为 v1\n例如，同步 1.10 版本 Kubernetes 的 Deployment 时，同步状态为：\nstatus:resources:- group:appsresources:- kind:Deploymentnamespaced:trueresource:deploymentssyncConditions:- lastTransitionTime:\"2022-01-13T04:34:04Z\"status:SyncingstorageVersion:v1version:v1beta1对于自定义资源来说，同步版本和存储版本是一致的\n接下来 资源同步完成后，便可以检索这些同步的资源，支持单类型资源检索和聚合资源(Collection Resource)检索\n","categories":"","description":"","excerpt":"Clusterpedia 的主要功能，便是提供对多集群内的资源进行复杂检索。\n通过 PediaCluster 资源来指定该集群中哪些资源需要 …","ref":"/zh-cn/docs/usage/sync-resources/","tags":"","title":"同步集群资源"},{"body":"Clusterpedia 主要有两个组件：\n ClusterSynchroManager 管理 主集群 内的 PediaCluster 资源，通过 PediaCluster 配置认证信息连接到指定集群，并且实时同步相应的资源。 APIServer 同样会监听 主集群 内的 PediaCluster 资源，并根据集群同步的资源以**兼容 Kubernetes OpenAPI **的方式来提供对资源的复杂检索  并且 Clusterpedia APIServer 以聚合式 API 的方式注册到 主集群 的 APIServer 中，这样我们通过和主集群相同的入口便可访问 Clusterpedia\nResources 和聚合资源 Clusterpedia APIServer 会在 Group pedia.clusterpedia.io 下提供两种检索资源：\nkubectl api-resources | grep pedia.clusterpedia.io NAME SHORTNAMES APIVERSION NAMESPACED KIND collectionresources pedia.clusterpedia.io/v1alpha1 false CollectionResource resources pedia.clusterpedia.io/v1alpha1 false Resources  Resources 用于指定资源类型的方式来检索，在使用上兼容 Kubernetes OpenAPI CollectionResource 用于检索由多个资源类型聚合而成的新的资源类型，以达到同时检索多种资源的目的   对于 Collection Resource 的概念和使用可以查看 什么是聚合资源（Collection Resource）, 聚合资源（Collection Resource）检索\n 访问 Clusterpedia 资源 在检索指定类型的资源时，可以按照 Kubernetes OpenAPI 的 Get/List 规范来请求， 这样我们不仅仅可以使用 URL 来访问 Clusterpedia Resources，还可以直接使用 kubectl 或者 client-go 来检索资源。\nClusterpedia 在 URL Path 上区分请求是多集群资源还是指定集群集群：\n多集群资源路径 直接以 Resources 资源路径为前缀 /apis/pedia.clusterpedia.io/v1alpha1/resources\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alhpa1/versions\" 指定集群资源路径 在 Resources 资源路径的基础上设置资源名称来指定集群 /apis/pedia.clusterpedia.io/v1alpha1/resources/clusters/\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alhpa1/clusters/cluster-1/versions 为 kubectl 生成集群访问的快捷配置 尽管我们可以使用 URL 来访问 Clusterpedia 资源，但是如果想要更方便的使用 kubectl 来查询的话，就需要配置集群的 kubeconfig cluster 配置。\nClusterpedia 提供了一个简单的脚本来帮助生成 kube config\ncurl -sfL https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/main/hack/gen-clusterconfigs.sh | sh - Current Context: kubernetes-admin@kubernetes Current Cluster: kubernetes Server: https://10.6.100.10:6443 TLS Server Name: Insecure Skip TLS Verify: Certificate Authority: Certificate Authority Data: *** Cluster \"clusterpedia\" set. Cluster \"cluster-1\" set. Cluster \"cluster-2\" set.  可以在 hack/gen-clusterconfigs.sh 找到该脚本\n 脚本会打印当前的集群信息，并将集群中 PediaCluster 配置到 kubeconfig 中。\n# .kube/config- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/pedia.clusterpedia.io/v1alpha1/resources/clusters/cluster-1name:cluster-1- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/pedia.clusterpedia.io/v1alpha1/resources/clusters/cluster-2name:cluster-2- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443/apis/pedia.clusterpedia.io/v1alpha1/resourcesname:clusterpedia- cluster:certificate-authority-data:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1Ea3lOREV3TVRNeU5Gb1hEVE14TURreU1qRXdNVE15TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTy9TCnZta1U5bk1uUlRIT3lvK3hjdFRJY0lPYnMzc0F5cTI2djRQYkVtb3ZWM2xPOVQwMTF2cE96S0pyOUFxeVZMRnYKVXFBRHBTakM3WXd3MnZwSld3bDEySlBvUm1xZ1FBSFNkYlJpU3BDTDRudjlvR25VOWI2dllWSy9iRitkUVFCSApnQ1h6NnZoTGY4Wmd2N2tUQ2JBdkFPaE9OSlU3MllYTE8zT0lZQjJva1NCRGFVUjNvNnpwZGVWTkt5V0EyNVA3CkRobk8yTk01QzlpRERqTTRLY2FTa3JPSkJvbUlsSHFZRjRwVXdTTlFvcGVGRVRyZ3ZzcTkwSks2YUJVS0t5ajYKK2NGdjI3S0k4K1ZMUEtaSTE2c25Mbng2RXRTazZtZjJXTHdJZlhyQlgwREsvYXBEQ015R2pEb2dCaGpJSVhoVAp2bjVQZndFWUNsdGZFTEhKSkdVQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJVDhLRHdCbUVvMHladUFEZkhkKzQ1L3ZFYzdNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBT0F5VHQ4S3ZFN0dvREhQT09pdgoyR2I2WWVsUU5KcUMza1dIOXc1NTFNaGZvS3ZiM21VaUV6ZVMwOUNwZUQrTFh5ZnlqQzhZYkJxQjZXSFhNZWMrCnpPdDNPazRYV0FmZVVZTXhOQ1FJblc4cjI4cmZnblErc1NCdHQyeERQN1RZY09oNVZGZkI2K3JtTmFTblZ1NjgKSFFxdlFMNEFXbVhkR09jRWNBRThYdkdiOWhwSjVNckRHdzQ0UTYyOG9YazZ0N01aWTFOMUNQdW9HZ1VmS1N3bgo1MUFWRTFOVVdNV0tEQXhaa2I4bEhvR3VWaDFzWmd3SnJRQjR5clh1cmxGN0Y2bVRlYm4rcDVKM0toT0V4KzlsCjFXdkwwbWkxL1J2bVJKNm11YmtjWUwzN1FJWjI1YXdyaEZMN0Z1ejNRSTFqTTdYMHZET2VUM2VuVUFCZW5SMS8KUnlnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==server:https://10.6.100.10:6443name:kubernetes脚本生成了用于多集群访问的 clusterpedia cluster 以及其他 PediaCluster cluster， 而且在访问 Clusterpedia 时会复用主集群的入口以及认证信息，相比主集群入口只是增加了 Resources 的 path。\n多集群的 kubeconfig 信息生成完成后，就可以使用 kubectl --cluster 来指定集群访问了\nkubectl --cluster clusterpedia version # 多集群检索时支持的资源 kubectl --cluster clusterpedia api-resources # cluster-1 支持检索的资源 kubectl --cluster cluster-1 api-resources 查看支持检索的资源类型 我们可以根据 URL 路径来分别获取全局资源信息和指定集群的资源信息。 全局资源信息是所有集群同步的资源类型的并集。\nClusterpedia 开放的 Discovery API 同样兼容 Kubernetes OpenAPI，可以使用 kubectl，client-go/discovery，client-go/restmapper 或者 controller-runtime/dynamic-restmapper 来访问。\n使用 URL 来获取 APIGroupList 以及 APIGroup 信息\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis\" | jq { \"kind\": \"APIGroupList\", \"apiVersion\": \"v1\", \"groups\": [ { \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } }, { \"name\": \"cert-manager.io\", \"versions\": [ { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } ], \"preferredVersion\": { \"groupVersion\": \"cert-manager.io/v1\", \"version\": \"v1\" } } ] } kubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps\" | jq { \"kind\": \"APIGroup\", \"apiVersion\": \"v1\", \"name\": \"apps\", \"versions\": [ { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" }, { \"groupVersion\": \"apps/v1beta2\", \"version\": \"v1beta2\" }, { \"groupVersion\": \"apps/v1beta1\", \"version\": \"v1beta1\" } ], \"preferredVersion\": { \"groupVersion\": \"apps/v1\", \"version\": \"v1\" } } 使用 kubectl 来获取 api-resources\nkubectl --cluster clusterpedia api-resources NAME SHORTNAMES APIVERSION NAMESPACED KIND configmaps cm v1 true ConfigMap namespaces ns v1 false Namespace nodes no v1 false Node pods po v1 true Pod secrets v1 true Secret daemonsets ds apps/v1 true DaemonSet deployments deploy apps/v1 true Deployment replicasets rs apps/v1 true ReplicaSet issuers cert-manager.io/v1 true Issuer ","categories":"","description":"","excerpt":"Clusterpedia 主要有两个组件：\n ClusterSynchroManager 管理 主集群 内的 PediaCluster 资 …","ref":"/zh-cn/docs/usage/access-clusterpedia/","tags":"","title":"访问 Clusterpedia"},{"body":"Clusterpedia 的安装分为两个部分：\n 安装存储组件 安装 Clusterpedia   用户如果使用已有的存储组件（MySQL 或者 PostgreSQL），则直接跳过安装存储组件\n 拉取项目：\ngit clone https://github.com/clusterpedia-io/clusterpedia.git cd clusterpedia 安装存储组件 Clusterpedia 安装时提供了 MySQL 8.0 和 PostgreSQL 12 两种存储组件以供选择\n 用户如果使用已有的存储组件（MySQL 或者 PostgreSQL），则直接跳过存储组件安装\n 进入所选存储组件的安装目录，这里选择使用 PostgreSQL\ncd ./deploy/internalstorage/postgres 存储组件使用 local pv 的方式存储数据，部署时，需要指定 local pv 所在节点\nexport STORAGE_NODE_NAME=\u003c节点名称\u003e sed \"s|__NODE_NAME__|$STORAGE_NODE_NAME|g\" `grep __NODE_NAME__ -rl ./templates` \u003e clusterpedia_internalstorage_pv.yaml 部署存储组件\nkubectl create -f . # 跳回 Clusterpedia 项目根目录 cd ../../ 安装 Clusterpedia 存储组件部署完成后，便可安装 Clusterpedia。\n如果选择使用已存在的存储组件，则需要参考 配置存储层 来将存储组件对接到默认存储层中\n 在 clusterpedia 项目根目录下进行操作\n # 部署 crds kubectl apply -f ./deploy/crds ./deploy # 部署 Clusterpedia 组件 kubectl apply -f ./deploy 安装完成 检查组件 Pods 运行是否正常\nkubectl -n clusterpedia-system get pods ","categories":"","description":"","excerpt":"Clusterpedia 的安装分为两个部分：\n 安装存储组件 安装 Clusterpedia   用户如果使用已有的存储组件（MySQL  …","ref":"/zh-cn/docs/installation/kubectl-apply/","tags":"","title":"使用 kubectl apply"},{"body":"多集群资源检索可以满足我们，根据查询条件一次过滤多个集群内的资源，并提供对这些资源的分页排序的能力\n在使用 kubectl 操作时，可以使用 kubectl --cluster clusterpedia api-resources 来查看当前集群支持的资源种类。\n基本功能 指定集群 多集群检索时，会默认检索所有的集群，我们也可以指定单个或者一组集群\nkubectl URL 使用 Search Label search.clusterpedia.io/clusters 来指定一组命名空间\nkubectl --cluster clusterpedia get deployments -l \"search.clusterpedia.io/clusters in (cluster-1,cluster-2)\" NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 coredns 2/2 2 2 64d # 指定单个集群 kubectl --cluster clusterpedia get deployments -l \"search.clusterpedia.io/clusters=cluster-1\" # 或者使用 --cluster \u003ccluster name\u003e 来指定 kubectl --cluster cluster-1 get deployments\" 对于指定单个集群的检索，也可以查看 指定集群检索\n 使用 URL 时，使用 clusters 作为 URL Query 来传递\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments?clusters=cluster-1\" 如果指定单个集群，也可以将 cluster name 放到 URL 路径中\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/clusters/cluster-1/apis/apps/v1/deployments\" 了解更多指定集群检索\n 指定命名空间 可以像查看原生 Kube 一样来指定单个命名空间或者所有命名空间\nkubectl URL 使用 -n \u003cnamespace\u003e 来指定命名空间，默认在 default 命名空间\nkubectl --cluster clusterpedia get deployments -n kube-system CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE cluster-1 coredns 2/2 2 2 68d cluster-2 calico-kube-controllers 1/1 1 1 64d cluster-2 coredns 2/2 2 2 64d 使用 -A 或者 --all-namespaces 来查看所有集群的所有命名空间下的资源\nkubectl --cluster clusterpedia get deployments -A NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 calico-kube-controllers 1/1 1 1 64d kube-system cluster-2 coredns 2/2 2 2 64d default cluster-2 dd-airflow-scheduler 0/1 1 0 54d default cluster-2 dd-airflow-web 0/1 1 0 54d  获取资源的 URL 和原生 Kubernetes 一样 /apis/apps/v1/deployments，\n只是需要加上 Clusterpedia Resources 的路径前缀 /apis/pedia.clusterpedia.io/v1alpha1/resources\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments\" # 指定命名空间 kubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/namespaces/kube-system/deployments\"   除了指定单个命名空间，还可以指定查看一组命名空间下的资源 kubectl URL 使用 Search Label search.clusterpedia.io/namespaces 来指定一组命名空间\n 一定要指定 -A 参数，避免 kubectl 在路径中设置 default namespace\n kubectl --cluster clusterpedia get deployments -A -l \"search.clusterpedia.io/namespaces in (kube-system, default)\" NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 calico-kube-controllers 1/1 1 1 64d kube-system cluster-2 coredns 2/2 2 2 64d default cluster-2 dd-airflow-scheduler 0/1 1 0 54d default cluster-2 dd-airflow-web 0/1 1 0 54d  使用 URL 时，就需要使用 Label Selector 来传递参数了，直接使用 URL Query namespaces 即可\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments?namespace=kube-system,default\"  指定资源名称 用户可以通过一组资源名称来过滤资源\n 当前暂时不支持模糊搜索 kubectl URL 使用 Search Label search.clusterpedia.io/namespaces 来指定一组命名空间\n 一定要指定 -A 参数，避免 kubectl 在路径中设置 default namespace\n kubectl --cluster clusterpedia get deployments -A -l \"search.clusterpedia.io/names=coredns\" NAMESPACE CLUSTER NAME READY UP-TO-DATE AVAILABLE AGE kube-system cluster-1 coredns 2/2 2 2 68d kube-system cluster-2 coredns 2/2 2 2 64d  使用 URL 时，使用 names 作为 URL Query 来传递，可以选择设置 namespaces 也可以不设置\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments?names=kube-coredns,dd-airflow-web\" 在多集群检索时，返回的数据实际是以类似 DeploymentList 的结构封装的数据。\n如果我们想要获取到单个的 Deployment 那么就需要在 URL 路径中指定 cluster name，参考获取获取单个资源\n  字段过滤 原生 Kubernetes 当前只支持对 metadata.name 和 metadata.namespace 的字段过滤，而且操作符只支持 =，!=，==，能力非常有限。\nClusterpedia 在兼容已有的 Field Selector 功能的基础上，提供了更加墙大的功能，支持和 Label Selector 相同的操作符。\nField Selector 的 key 当前支持三种格式：\n 使用 . 分隔字段  kubectl --cluster clusterpedia --field-selector=\"status.phase=Running\" # 也可以在首字符添加 `.` kubectl --cluster clusterpedia --field-selector=\".status.phase=Running\"  字段名称使用 '' 或者 \"\" 来包裹，可以用于带 . 之类的非法字符的字段  kubectl --cluster clusterpedia get deploy \\  --field-selector=\"metadata.annotations['test.io'] in (value1,value2),spec.replica=3\"  使用 [] 来分隔字段，[] 内字符串必须使用 '' 或者 \"\" 来包裹  kubectl --cluster clusterpedia --field-selector=\"status['phase']=Running\" 列表字段支持 实际在字段过滤的设计时考虑到了对列表元素内字段过滤，不过由于使用场景是否真正有意义还需要更多的讨论 issue: support list field filtering\n示例：\nkubectl get po --field-selector=\"spec.containers[].name!=container1\" kubectl get po --field-selector=\"spec.containers[].name == container1\" kubectl get po --field-selector=\"spec.containers[1].name in (container1,container2)\" 根据父辈以及祖辈 Owner 查询 通过 Owner 检索是一个非常有用的检索功能， 并且 Clusterpedia 在 Owner 的基础上还支持对 Owner 进行辈分提升来进行祖辈甚至更好辈分的检索。\n通过 Owner 检索，可以一次查询到 Deployment 下的所有 Pods，无需中间再查询 ReplicaSet。\n Owner 查询必须指定单个集群，可以使用 Serach Label 或者 URL Query 来指定，也可以在 URL Path 中指定集群名称\n当前暂时只支持 Owner UID 查询\n 先使用 kubectl 获取 Deployment 的 UID\nkubectl --cluster cluster-1 get deploy fake-deploy -o jsonpath=\"{.metadata.uid}\" 151ae265-28fe-4734-850e-b641266cd5da  在 kubectl 下获取 uid 可能比较麻烦，但是在 UI 场景中通常已经获得了 metadata.uid 更加容易\n kubectl URL 使用 owner-uid 来指定 Owner 的 UID, owner-seniority 对 Owner 进行辈分提升。\nkubectl --cluster cluster-1 get pods -l \\ \"internalstorage.clusterpedia.io/owner-uid=151ae265-28fe-4734-850e-b641266cd5da,\\ internalstorage.clusterpedia.io/owner-seniority=1\"  Owner 检索作为试验性功能，暂时以 internalstorage.clusterpedia.io 作为 Search Label 前缀\n确定相关功能的可用性和实用性后，移到 search.clusterpedia.io 下。\n  Owner 检索作为试验性功能，暂时还没有提供 URL Query\n 使用以 Owner Namespace 和 Owenr Name 结合成 Owner Key 来查询的功能尚在讨论中，可以在 issue: Support for searching resources by owner 参与讨论。\n分页与排序 分页和排序是资源检索必不可少的功能\n根据多个字段进行排序 可以指定多个字段进行排序，而对排序字段的支持是由存储层来决定。\n当前默认存储层支持对 cluster，namespace，name，created_at，resource_version 进行正序和倒序的排序，字段也支持随意的组合 kubectl URL 使用多个字段进行正序排序\nkubectl --cluster clusterpedia get pods -l \\  \"search.clusterpedia.io/orderby in (cluster, name) 由于 Label Selector 对 value 的限制，倒序时需要在字段结尾加上 _desc\nkubectl --cluster clusterpedia get pods -l \\  \"search.clusterpedia.io/orderby in (namespace_desc, cluster, name)  Owner 检索作为试验性功能，暂时还没有提供 URL Query\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments?orderby=namespace,cluster 指定字段倒序排序时，在字段后添加 desc，以空格分隔\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments?orderby=namespace desc,cluster\"  分页 原生 Kubernetes 实际是支持分页的，ListOptions 中便已经存在用于分页查询的字段。\nClusterpedia 复用 ListOptions.Limit 和 ListOptions.Continue 字段作为分页的 size 和 offset。\nkubectl URL kubectl 的 --chunk-size 实际通过设置 limit 来用于分片拉取， 原生的 Kubernetes APIServer 会在返回的响应中携带用于下一次拉取的 continue， 并根据 --chunk-size 和 conintue 进行下一次拉取，直到相应的数据中 Conintue 为空。\nClusterpedia 为了保证在 kubectl 中实现分页检索，默认并不会在响应中返回 continue 字段，这样避免了 kubectl 使用分片拉取全部数据\nkubectl --cluster cluster-1 get pods --chunk-size 10 需要注意 kubectl 在不设置 --chunk-size 的情况下，limit 会被设置成默认值 500， 也就是说 search.clusterpedia.io/size 实际是无法生效的，只是用于和 search.clusterpedia.io/offset 形成对应关系\n URL Query 的优先级大于 Search Label\n 在 kubectl 中 continue 是没有 flag 可以设置的。所以还是要使用 Search Label 来传递。\nkubectl --cluster clusterpedia get pods --chunk-size 10 -l \\  \"search.clusterpedia.io/offset=10\"  分页在 URL 中设置 limit 和 continue，即可\nkubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments?limit=10\u0026continue=5\"  响应携带 Continue 信息 响应数据的 ListMeta.Continue 可以用于 ListOptions.Continue 中作为下一次拉取的 offset\n分页功能中我们提到，为了避免 kubectl 进行对全量数据的分片拉取，Clusterepdia 不会在响应中携带 Continue 信息。\n不过如果用户有需求那么可以要求响应中携带 Continue 信息 kubectl URL 在 kubectl 设置 search.clusterpedia.io/with-continue 会导致以分片拉取的形式拉取全量资源。\nkubectl --cluster clusterpedia get deploy -l \\  \"search.clusterpedia.io/with-continue=true\"  在使用 URL 访问 Clusterepdia 时，响应的 Continue 可以作为下一次请求的 offset\n 搭配分页功能使用\n kubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments?withContinue=true\u0026limit=1\" | jq { \"kind\": \"DeploymentList\", \"apiVersion\": \"apps/v1\", \"metadata\": { \"continue\": \"1\" }, \"items\": [ ... ] }  响应携带剩余资源数量信息 在一些 UI 场景下，往往会需要获取到当前检索条件下的资源总量。\nKubernetes List 响应的 ListMeta 中存在 RemainingItemCount 字段，\n通过复用该字段，便可在兼容 Kubernetes OpenAPI 的基础下返回资源总量：\noffset + len(list.items) + list.metadata.remainingItemCount kubectl URL 需要以 URL 的方式使用该功能\n 在 URL Query 设置 withRemainingCount 即可要求响应总携带剩余资源数量\n 搭配分页功能使用\n kubectl get --raw=\"/apis/pedia.clusterpedia.io/v1alpha1/resources/apis/apps/v1/deployments?withRemainingCount\u0026limit=1\" | jq { \"kind\": \"DeploymentList\", \"apiVersion\": \"apps/v1\", \"metadata\": { \"remainingItemCount\": 23 }, \"items\": [ ... ] }  ","categories":"","description":"","excerpt":"多集群资源检索可以满足我们，根据查询条件一次过滤多个集群内的资源，并提供对这些资源的分页排序的能力\n在使用 kubectl 操作时， …","ref":"/zh-cn/docs/usage/search/searching-multi-cluster/","tags":"","title":"多集群资源检索"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/installation/","tags":"","title":"安装"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/concepts/collection-resource/","tags":"","title":"聚合资源(Collection Resource)"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/usage/search/searching-specified-cluster/","tags":"","title":"指定集群资源检索"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/concepts/","tags":"","title":"概念"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/usage/search/searching-collection-resource/","tags":"","title":"聚合资源(Collection Resource)检索"},{"body":"Helm 安装正在开发中 clusterpedia required helm deployment\n","categories":"","description":"","excerpt":"Helm 安装正在开发中 clusterpedia required helm deployment\n","ref":"/zh-cn/docs/installation/helm/","tags":"","title":"使用 Helm"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/usage/","tags":"","title":"使用"},{"body":" About Clusterpedia The Encyclopedia of Kubernetes clusters        This name Clusterpedia is inspired by Wikipedia. It is an encyclopedia of multi-cluster to synchronize, search for, and simply control multi-cluster resources.\nClusterpedia can synchronize resources with multiple clusters and provide more powerful search features on the basis of compatibility with Kubernetes OpenAPI to help you effectively get any multi-cluster resource that you are looking for in a quick and easy way.\n    Features Support for complex search, filters, sorting, paging, and more Support for requesting relevant resources when you query resources Unify the search entry for master clusters and multi-cluster resources Compatible with kubernetes OpenAPI, where you can directly use kubectl for multi-cluster search without any third-party plug-ins or tools Compatible with synchronizing different versions of cluster resources, not restricted by the version of master cluster High performance and low memory consumption for resource synchronization Automatically start/stop resource synchronization according to the current health status of the cluster Support for plug-in storage layer. You can use other storage components to customize the storage layer according to your needs. High availability     ","categories":"","description":"","excerpt":" About Clusterpedia The Encyclopedia of Kubernetes clusters …","ref":"/about/","tags":"","title":"About Clusterpedia"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/","tags":"","title":"Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/categories/","tags":"","title":"Categories"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu629dc54e681a6f98b3ff241b67cb80fe_677037_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu629dc54e681a6f98b3ff241b67cb80fe_677037_1920x1080_fill_q75_catmullrom_top.jpg); } }  Welcome to Clusterpedia Lean More   Source Code   The Encyclopedia of Kubernetes clusters          Clusterpedia is used for complex resource searches across multiple clusters,\nsupport simultaneous search of a single kind of resource or multiple kinds of resources existing in multiple clusters.\n      Join us on Slack Join the community on Slack\n Join us …\n   欢迎加入 Clusterpedia! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n Contribute to Clusterpedia …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"Clusterpedia"},{"body":"  #td-cover-block-0 { background-image: url(/zh-cn/featured-background_hu629dc54e681a6f98b3ff241b67cb80fe_677037_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/zh-cn/featured-background_hu629dc54e681a6f98b3ff241b67cb80fe_677037_1920x1080_fill_q75_catmullrom_top.jpg); } }  欢迎来到 Clusterpedia Lean More   Source Code   The Encyclopedia of Kubernetes clusters           混合检索多集群的资源   通过 Clusterpedia 可以一次获取多个集群内的资源，并且支持强大的检索条件     丰富的资源支持  Clusterpedia 不仅仅支持以 Pods, Deployments 等资源类型来检索多个集群中资源，\n还支持将多个资源组合成集合资源（Collection Resource）来聚合检索多个类型的资源，例如 Workloads。\n支持检索自定义资源\n     兼容 Kubernetes OpenAPI  可以利用已有的工具，例如 kubectl 或者 client-go 来检索多集群资源，无需额外框架或者工具\n     强大的检索条件支持  在兼容 Kubernetes OpenAPI 的基础上，除了支持 Label Selector 外，还支持更加复杂和使用的检索条件，例如\n 支持检索多个集群以及命名空间下的资源，\n 更加强大的 Field Selector, 支持筛选资源的任意字段，\n 可以通过父辈甚至祖辈 Owner 来查询后代资源，  基于多个资源字段的排序，\n 分页以及 remaining items count 支持\n      Join us on Slack Join the community on Slack\n Join us …\n   欢迎加入 Clusterpedia! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n Contribute to Clusterpedia …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/zh-cn/","tags":"","title":"Clusterpedia"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/","tags":"","title":"Document"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/concepts/pediacluster/","tags":"","title":"PediaCluster"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/tags/","tags":"","title":"Tags"},{"body":" 关于 Clusterpedia The Encyclopedia of Kubernetes clusters        Clusterpedia 这个名称借鉴自 Wikipedia，是多集群的百科全书，其核心理念是收集、检索和简单控制多集群资源。\n通过聚合收集多集群资源，在兼容 Kubernetes OpenAPI 的基础上额外提供更加强大的检索功能，让用户更方便快捷地在多集群中获取想要的任何资源。\n    支持的功能  支持复杂的检索条件、过滤条件、排序、分页等等 支持查询资源时请求附带关系资源 统一主集群和多集群资源检索入口 兼容 kubernetes OpenAPI，可以直接使用 kubectl 进行多集群检索，而无需第三方插件或者工具 兼容收集不同版本的集群资源，不受主集群版本约束 资源收集高性能，低内存 根据集群当前的健康状态，自动开始/停止资源收集 插件化存储层，用户可以根据自己需求使用其他存储组件自定义存储层 高可用      ","categories":"","description":"","excerpt":" 关于 Clusterpedia The Encyclopedia of Kubernetes clusters …","ref":"/zh-cn/about/","tags":"","title":"关于 Clusterpedia"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/blog/","tags":"","title":"博客"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/","tags":"","title":"文档"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/release-notes/","tags":"","title":"版本日志"},{"body":"Clusterpedia 支持对 多个集群内资源，指定集群的资源 以及聚合资源 的复杂检索，\n并且这些复杂检索的条件可以通过两种方式传递给 Clusterpedia APIServer：\n URL Query：直接将查询条件作为 Query 来传递 Search Labels：为了兼容 Kubernetes OpenAPI，可以将查询条件设置在 Label Selector。  除了条件检索，Clusterpedia 还增强了 Field Selector ，满足我们通过 metadata.annotation 或者 status.* 内字段的过滤需求。\n条件检索 元信息检索    作用 search label key url query     指定集群名称 search.clusterpedia.io/clusters clusters   指定命名空间 search.clusterpedia.io/namespaces namespaces   指定资源名称 search.clusterpedia.io/names names    Owner 检索    作用 search label key url query     指定 Owner UID internalstorage.clusterpedia.io/owner-uid ownerID   指定 Owner Key internalstorage.clusterpedia.io/owner-key ownerKey   指定 Owner 辈分 internalstorage.clusterpedia.io/owner-seniority ownerSeniority    排序    作用 search label key url query     多字段排序 search.clusterpedia.io/orderby orderby    分页    作用 search label key url query     size search.clusterpedia.io/size limit   offset search.clusterpedia.io/offset continue   要求响应携带 Continue search.clusterpedia.io/with-continue withContinue   要求响应携带资源剩余数量 search.clusterpedia.io/with-remaining-count withRemainingCount    search label 支持和 Label Selector 相同的操作符：exist，not exist，==，=，!=，in，not in。\n 在使用 kubectl 操作时，分页 size 只能通过 kubectl --chunk-size 来设置，因为 kubectl 会将 limit 默认设置为 500。\n 字段过滤 Clusterpedia Field Selector 的在操作符上与 Label Selector 保持一致，同样支持 exist，not exist，==，=，!=，in，not in。\n无论是 URL 还是 kubectl 上的命令参数都原生 Field Selector 一致\n   作用 kubectl url query     字段过滤 kubectl –field-selector fieldSelector    详细可以查看：\n support field selector issue: support list field filtering  ","categories":"","description":"","excerpt":"Clusterpedia 支持对 多个集群内资源，指定集群的资源 以及聚合资源 的复杂检索， …","ref":"/zh-cn/docs/usage/search/","tags":"","title":"资源检索"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/docs/installation/configurate/","tags":"","title":"配置"}]